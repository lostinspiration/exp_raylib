/* automatically generated by rust-bindgen 0.70.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const RAYLIB_VERSION_MAJOR: u32 = 5;
pub const RAYLIB_VERSION_MINOR: u32 = 0;
pub const RAYLIB_VERSION_PATCH: u32 = 0;
pub const RAYLIB_VERSION: &[u8; 4] = b"5.0\0";
pub const PI: f64 = 3.141592653589793;
pub const DEG2RAD: f64 = 0.017453292519943295;
pub const RAD2DEG: f64 = 57.29577951308232;
pub const __bool_true_false_are_defined: u32 = 1;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vector2 {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Vector2"][::std::mem::size_of::<Vector2>() - 8usize];
    ["Alignment of Vector2"][::std::mem::align_of::<Vector2>() - 4usize];
    ["Offset of field: Vector2::x"][::std::mem::offset_of!(Vector2, x) - 0usize];
    ["Offset of field: Vector2::y"][::std::mem::offset_of!(Vector2, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vector3 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Vector3"][::std::mem::size_of::<Vector3>() - 12usize];
    ["Alignment of Vector3"][::std::mem::align_of::<Vector3>() - 4usize];
    ["Offset of field: Vector3::x"][::std::mem::offset_of!(Vector3, x) - 0usize];
    ["Offset of field: Vector3::y"][::std::mem::offset_of!(Vector3, y) - 4usize];
    ["Offset of field: Vector3::z"][::std::mem::offset_of!(Vector3, z) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vector4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Vector4"][::std::mem::size_of::<Vector4>() - 16usize];
    ["Alignment of Vector4"][::std::mem::align_of::<Vector4>() - 4usize];
    ["Offset of field: Vector4::x"][::std::mem::offset_of!(Vector4, x) - 0usize];
    ["Offset of field: Vector4::y"][::std::mem::offset_of!(Vector4, y) - 4usize];
    ["Offset of field: Vector4::z"][::std::mem::offset_of!(Vector4, z) - 8usize];
    ["Offset of field: Vector4::w"][::std::mem::offset_of!(Vector4, w) - 12usize];
};
pub type Quaternion = Vector4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Matrix {
    pub m0: f32,
    pub m4: f32,
    pub m8: f32,
    pub m12: f32,
    pub m1: f32,
    pub m5: f32,
    pub m9: f32,
    pub m13: f32,
    pub m2: f32,
    pub m6: f32,
    pub m10: f32,
    pub m14: f32,
    pub m3: f32,
    pub m7: f32,
    pub m11: f32,
    pub m15: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Matrix"][::std::mem::size_of::<Matrix>() - 64usize];
    ["Alignment of Matrix"][::std::mem::align_of::<Matrix>() - 4usize];
    ["Offset of field: Matrix::m0"][::std::mem::offset_of!(Matrix, m0) - 0usize];
    ["Offset of field: Matrix::m4"][::std::mem::offset_of!(Matrix, m4) - 4usize];
    ["Offset of field: Matrix::m8"][::std::mem::offset_of!(Matrix, m8) - 8usize];
    ["Offset of field: Matrix::m12"][::std::mem::offset_of!(Matrix, m12) - 12usize];
    ["Offset of field: Matrix::m1"][::std::mem::offset_of!(Matrix, m1) - 16usize];
    ["Offset of field: Matrix::m5"][::std::mem::offset_of!(Matrix, m5) - 20usize];
    ["Offset of field: Matrix::m9"][::std::mem::offset_of!(Matrix, m9) - 24usize];
    ["Offset of field: Matrix::m13"][::std::mem::offset_of!(Matrix, m13) - 28usize];
    ["Offset of field: Matrix::m2"][::std::mem::offset_of!(Matrix, m2) - 32usize];
    ["Offset of field: Matrix::m6"][::std::mem::offset_of!(Matrix, m6) - 36usize];
    ["Offset of field: Matrix::m10"][::std::mem::offset_of!(Matrix, m10) - 40usize];
    ["Offset of field: Matrix::m14"][::std::mem::offset_of!(Matrix, m14) - 44usize];
    ["Offset of field: Matrix::m3"][::std::mem::offset_of!(Matrix, m3) - 48usize];
    ["Offset of field: Matrix::m7"][::std::mem::offset_of!(Matrix, m7) - 52usize];
    ["Offset of field: Matrix::m11"][::std::mem::offset_of!(Matrix, m11) - 56usize];
    ["Offset of field: Matrix::m15"][::std::mem::offset_of!(Matrix, m15) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Color {
    pub r: ::std::os::raw::c_uchar,
    pub g: ::std::os::raw::c_uchar,
    pub b: ::std::os::raw::c_uchar,
    pub a: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Color"][::std::mem::size_of::<Color>() - 4usize];
    ["Alignment of Color"][::std::mem::align_of::<Color>() - 1usize];
    ["Offset of field: Color::r"][::std::mem::offset_of!(Color, r) - 0usize];
    ["Offset of field: Color::g"][::std::mem::offset_of!(Color, g) - 1usize];
    ["Offset of field: Color::b"][::std::mem::offset_of!(Color, b) - 2usize];
    ["Offset of field: Color::a"][::std::mem::offset_of!(Color, a) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Rectangle {
    pub x: f32,
    pub y: f32,
    pub width: f32,
    pub height: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Rectangle"][::std::mem::size_of::<Rectangle>() - 16usize];
    ["Alignment of Rectangle"][::std::mem::align_of::<Rectangle>() - 4usize];
    ["Offset of field: Rectangle::x"][::std::mem::offset_of!(Rectangle, x) - 0usize];
    ["Offset of field: Rectangle::y"][::std::mem::offset_of!(Rectangle, y) - 4usize];
    ["Offset of field: Rectangle::width"][::std::mem::offset_of!(Rectangle, width) - 8usize];
    ["Offset of field: Rectangle::height"][::std::mem::offset_of!(Rectangle, height) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Image {
    pub data: *mut ::std::os::raw::c_void,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub mipmaps: ::std::os::raw::c_int,
    pub format: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Image"][::std::mem::size_of::<Image>() - 24usize];
    ["Alignment of Image"][::std::mem::align_of::<Image>() - 8usize];
    ["Offset of field: Image::data"][::std::mem::offset_of!(Image, data) - 0usize];
    ["Offset of field: Image::width"][::std::mem::offset_of!(Image, width) - 8usize];
    ["Offset of field: Image::height"][::std::mem::offset_of!(Image, height) - 12usize];
    ["Offset of field: Image::mipmaps"][::std::mem::offset_of!(Image, mipmaps) - 16usize];
    ["Offset of field: Image::format"][::std::mem::offset_of!(Image, format) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture {
    pub id: ::std::os::raw::c_uint,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub mipmaps: ::std::os::raw::c_int,
    pub format: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Texture"][::std::mem::size_of::<Texture>() - 20usize];
    ["Alignment of Texture"][::std::mem::align_of::<Texture>() - 4usize];
    ["Offset of field: Texture::id"][::std::mem::offset_of!(Texture, id) - 0usize];
    ["Offset of field: Texture::width"][::std::mem::offset_of!(Texture, width) - 4usize];
    ["Offset of field: Texture::height"][::std::mem::offset_of!(Texture, height) - 8usize];
    ["Offset of field: Texture::mipmaps"][::std::mem::offset_of!(Texture, mipmaps) - 12usize];
    ["Offset of field: Texture::format"][::std::mem::offset_of!(Texture, format) - 16usize];
};
pub type Texture2D = Texture;
pub type TextureCubemap = Texture;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderTexture {
    pub id: ::std::os::raw::c_uint,
    pub texture: Texture,
    pub depth: Texture,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RenderTexture"][::std::mem::size_of::<RenderTexture>() - 44usize];
    ["Alignment of RenderTexture"][::std::mem::align_of::<RenderTexture>() - 4usize];
    ["Offset of field: RenderTexture::id"][::std::mem::offset_of!(RenderTexture, id) - 0usize];
    ["Offset of field: RenderTexture::texture"]
        [::std::mem::offset_of!(RenderTexture, texture) - 4usize];
    ["Offset of field: RenderTexture::depth"]
        [::std::mem::offset_of!(RenderTexture, depth) - 24usize];
};
pub type RenderTexture2D = RenderTexture;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NPatchInfo {
    pub source: Rectangle,
    pub left: ::std::os::raw::c_int,
    pub top: ::std::os::raw::c_int,
    pub right: ::std::os::raw::c_int,
    pub bottom: ::std::os::raw::c_int,
    pub layout: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NPatchInfo"][::std::mem::size_of::<NPatchInfo>() - 36usize];
    ["Alignment of NPatchInfo"][::std::mem::align_of::<NPatchInfo>() - 4usize];
    ["Offset of field: NPatchInfo::source"][::std::mem::offset_of!(NPatchInfo, source) - 0usize];
    ["Offset of field: NPatchInfo::left"][::std::mem::offset_of!(NPatchInfo, left) - 16usize];
    ["Offset of field: NPatchInfo::top"][::std::mem::offset_of!(NPatchInfo, top) - 20usize];
    ["Offset of field: NPatchInfo::right"][::std::mem::offset_of!(NPatchInfo, right) - 24usize];
    ["Offset of field: NPatchInfo::bottom"][::std::mem::offset_of!(NPatchInfo, bottom) - 28usize];
    ["Offset of field: NPatchInfo::layout"][::std::mem::offset_of!(NPatchInfo, layout) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GlyphInfo {
    pub value: ::std::os::raw::c_int,
    pub offsetX: ::std::os::raw::c_int,
    pub offsetY: ::std::os::raw::c_int,
    pub advanceX: ::std::os::raw::c_int,
    pub image: Image,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GlyphInfo"][::std::mem::size_of::<GlyphInfo>() - 40usize];
    ["Alignment of GlyphInfo"][::std::mem::align_of::<GlyphInfo>() - 8usize];
    ["Offset of field: GlyphInfo::value"][::std::mem::offset_of!(GlyphInfo, value) - 0usize];
    ["Offset of field: GlyphInfo::offsetX"][::std::mem::offset_of!(GlyphInfo, offsetX) - 4usize];
    ["Offset of field: GlyphInfo::offsetY"][::std::mem::offset_of!(GlyphInfo, offsetY) - 8usize];
    ["Offset of field: GlyphInfo::advanceX"][::std::mem::offset_of!(GlyphInfo, advanceX) - 12usize];
    ["Offset of field: GlyphInfo::image"][::std::mem::offset_of!(GlyphInfo, image) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Font {
    pub baseSize: ::std::os::raw::c_int,
    pub glyphCount: ::std::os::raw::c_int,
    pub glyphPadding: ::std::os::raw::c_int,
    pub texture: Texture2D,
    pub recs: *mut Rectangle,
    pub glyphs: *mut GlyphInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Font"][::std::mem::size_of::<Font>() - 48usize];
    ["Alignment of Font"][::std::mem::align_of::<Font>() - 8usize];
    ["Offset of field: Font::baseSize"][::std::mem::offset_of!(Font, baseSize) - 0usize];
    ["Offset of field: Font::glyphCount"][::std::mem::offset_of!(Font, glyphCount) - 4usize];
    ["Offset of field: Font::glyphPadding"][::std::mem::offset_of!(Font, glyphPadding) - 8usize];
    ["Offset of field: Font::texture"][::std::mem::offset_of!(Font, texture) - 12usize];
    ["Offset of field: Font::recs"][::std::mem::offset_of!(Font, recs) - 32usize];
    ["Offset of field: Font::glyphs"][::std::mem::offset_of!(Font, glyphs) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Camera3D {
    pub position: Vector3,
    pub target: Vector3,
    pub up: Vector3,
    pub fovy: f32,
    pub projection: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Camera3D"][::std::mem::size_of::<Camera3D>() - 44usize];
    ["Alignment of Camera3D"][::std::mem::align_of::<Camera3D>() - 4usize];
    ["Offset of field: Camera3D::position"][::std::mem::offset_of!(Camera3D, position) - 0usize];
    ["Offset of field: Camera3D::target"][::std::mem::offset_of!(Camera3D, target) - 12usize];
    ["Offset of field: Camera3D::up"][::std::mem::offset_of!(Camera3D, up) - 24usize];
    ["Offset of field: Camera3D::fovy"][::std::mem::offset_of!(Camera3D, fovy) - 36usize];
    ["Offset of field: Camera3D::projection"]
        [::std::mem::offset_of!(Camera3D, projection) - 40usize];
};
pub type Camera = Camera3D;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Camera2D {
    pub offset: Vector2,
    pub target: Vector2,
    pub rotation: f32,
    pub zoom: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Camera2D"][::std::mem::size_of::<Camera2D>() - 24usize];
    ["Alignment of Camera2D"][::std::mem::align_of::<Camera2D>() - 4usize];
    ["Offset of field: Camera2D::offset"][::std::mem::offset_of!(Camera2D, offset) - 0usize];
    ["Offset of field: Camera2D::target"][::std::mem::offset_of!(Camera2D, target) - 8usize];
    ["Offset of field: Camera2D::rotation"][::std::mem::offset_of!(Camera2D, rotation) - 16usize];
    ["Offset of field: Camera2D::zoom"][::std::mem::offset_of!(Camera2D, zoom) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Mesh {
    pub vertexCount: ::std::os::raw::c_int,
    pub triangleCount: ::std::os::raw::c_int,
    pub vertices: *mut f32,
    pub texcoords: *mut f32,
    pub texcoords2: *mut f32,
    pub normals: *mut f32,
    pub tangents: *mut f32,
    pub colors: *mut ::std::os::raw::c_uchar,
    pub indices: *mut ::std::os::raw::c_ushort,
    pub animVertices: *mut f32,
    pub animNormals: *mut f32,
    pub boneIds: *mut ::std::os::raw::c_uchar,
    pub boneWeights: *mut f32,
    pub vaoId: ::std::os::raw::c_uint,
    pub vboId: *mut ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Mesh"][::std::mem::size_of::<Mesh>() - 112usize];
    ["Alignment of Mesh"][::std::mem::align_of::<Mesh>() - 8usize];
    ["Offset of field: Mesh::vertexCount"][::std::mem::offset_of!(Mesh, vertexCount) - 0usize];
    ["Offset of field: Mesh::triangleCount"][::std::mem::offset_of!(Mesh, triangleCount) - 4usize];
    ["Offset of field: Mesh::vertices"][::std::mem::offset_of!(Mesh, vertices) - 8usize];
    ["Offset of field: Mesh::texcoords"][::std::mem::offset_of!(Mesh, texcoords) - 16usize];
    ["Offset of field: Mesh::texcoords2"][::std::mem::offset_of!(Mesh, texcoords2) - 24usize];
    ["Offset of field: Mesh::normals"][::std::mem::offset_of!(Mesh, normals) - 32usize];
    ["Offset of field: Mesh::tangents"][::std::mem::offset_of!(Mesh, tangents) - 40usize];
    ["Offset of field: Mesh::colors"][::std::mem::offset_of!(Mesh, colors) - 48usize];
    ["Offset of field: Mesh::indices"][::std::mem::offset_of!(Mesh, indices) - 56usize];
    ["Offset of field: Mesh::animVertices"][::std::mem::offset_of!(Mesh, animVertices) - 64usize];
    ["Offset of field: Mesh::animNormals"][::std::mem::offset_of!(Mesh, animNormals) - 72usize];
    ["Offset of field: Mesh::boneIds"][::std::mem::offset_of!(Mesh, boneIds) - 80usize];
    ["Offset of field: Mesh::boneWeights"][::std::mem::offset_of!(Mesh, boneWeights) - 88usize];
    ["Offset of field: Mesh::vaoId"][::std::mem::offset_of!(Mesh, vaoId) - 96usize];
    ["Offset of field: Mesh::vboId"][::std::mem::offset_of!(Mesh, vboId) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Shader {
    pub id: ::std::os::raw::c_uint,
    pub locs: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Shader"][::std::mem::size_of::<Shader>() - 16usize];
    ["Alignment of Shader"][::std::mem::align_of::<Shader>() - 8usize];
    ["Offset of field: Shader::id"][::std::mem::offset_of!(Shader, id) - 0usize];
    ["Offset of field: Shader::locs"][::std::mem::offset_of!(Shader, locs) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MaterialMap {
    pub texture: Texture2D,
    pub color: Color,
    pub value: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MaterialMap"][::std::mem::size_of::<MaterialMap>() - 28usize];
    ["Alignment of MaterialMap"][::std::mem::align_of::<MaterialMap>() - 4usize];
    ["Offset of field: MaterialMap::texture"]
        [::std::mem::offset_of!(MaterialMap, texture) - 0usize];
    ["Offset of field: MaterialMap::color"][::std::mem::offset_of!(MaterialMap, color) - 20usize];
    ["Offset of field: MaterialMap::value"][::std::mem::offset_of!(MaterialMap, value) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Material {
    pub shader: Shader,
    pub maps: *mut MaterialMap,
    pub params: [f32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Material"][::std::mem::size_of::<Material>() - 40usize];
    ["Alignment of Material"][::std::mem::align_of::<Material>() - 8usize];
    ["Offset of field: Material::shader"][::std::mem::offset_of!(Material, shader) - 0usize];
    ["Offset of field: Material::maps"][::std::mem::offset_of!(Material, maps) - 16usize];
    ["Offset of field: Material::params"][::std::mem::offset_of!(Material, params) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Transform {
    pub translation: Vector3,
    pub rotation: Quaternion,
    pub scale: Vector3,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Transform"][::std::mem::size_of::<Transform>() - 40usize];
    ["Alignment of Transform"][::std::mem::align_of::<Transform>() - 4usize];
    ["Offset of field: Transform::translation"]
        [::std::mem::offset_of!(Transform, translation) - 0usize];
    ["Offset of field: Transform::rotation"][::std::mem::offset_of!(Transform, rotation) - 12usize];
    ["Offset of field: Transform::scale"][::std::mem::offset_of!(Transform, scale) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BoneInfo {
    pub name: [::std::os::raw::c_char; 32usize],
    pub parent: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BoneInfo"][::std::mem::size_of::<BoneInfo>() - 36usize];
    ["Alignment of BoneInfo"][::std::mem::align_of::<BoneInfo>() - 4usize];
    ["Offset of field: BoneInfo::name"][::std::mem::offset_of!(BoneInfo, name) - 0usize];
    ["Offset of field: BoneInfo::parent"][::std::mem::offset_of!(BoneInfo, parent) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Model {
    pub transform: Matrix,
    pub meshCount: ::std::os::raw::c_int,
    pub materialCount: ::std::os::raw::c_int,
    pub meshes: *mut Mesh,
    pub materials: *mut Material,
    pub meshMaterial: *mut ::std::os::raw::c_int,
    pub boneCount: ::std::os::raw::c_int,
    pub bones: *mut BoneInfo,
    pub bindPose: *mut Transform,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Model"][::std::mem::size_of::<Model>() - 120usize];
    ["Alignment of Model"][::std::mem::align_of::<Model>() - 8usize];
    ["Offset of field: Model::transform"][::std::mem::offset_of!(Model, transform) - 0usize];
    ["Offset of field: Model::meshCount"][::std::mem::offset_of!(Model, meshCount) - 64usize];
    ["Offset of field: Model::materialCount"]
        [::std::mem::offset_of!(Model, materialCount) - 68usize];
    ["Offset of field: Model::meshes"][::std::mem::offset_of!(Model, meshes) - 72usize];
    ["Offset of field: Model::materials"][::std::mem::offset_of!(Model, materials) - 80usize];
    ["Offset of field: Model::meshMaterial"][::std::mem::offset_of!(Model, meshMaterial) - 88usize];
    ["Offset of field: Model::boneCount"][::std::mem::offset_of!(Model, boneCount) - 96usize];
    ["Offset of field: Model::bones"][::std::mem::offset_of!(Model, bones) - 104usize];
    ["Offset of field: Model::bindPose"][::std::mem::offset_of!(Model, bindPose) - 112usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ModelAnimation {
    pub boneCount: ::std::os::raw::c_int,
    pub frameCount: ::std::os::raw::c_int,
    pub bones: *mut BoneInfo,
    pub framePoses: *mut *mut Transform,
    pub name: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ModelAnimation"][::std::mem::size_of::<ModelAnimation>() - 56usize];
    ["Alignment of ModelAnimation"][::std::mem::align_of::<ModelAnimation>() - 8usize];
    ["Offset of field: ModelAnimation::boneCount"]
        [::std::mem::offset_of!(ModelAnimation, boneCount) - 0usize];
    ["Offset of field: ModelAnimation::frameCount"]
        [::std::mem::offset_of!(ModelAnimation, frameCount) - 4usize];
    ["Offset of field: ModelAnimation::bones"]
        [::std::mem::offset_of!(ModelAnimation, bones) - 8usize];
    ["Offset of field: ModelAnimation::framePoses"]
        [::std::mem::offset_of!(ModelAnimation, framePoses) - 16usize];
    ["Offset of field: ModelAnimation::name"]
        [::std::mem::offset_of!(ModelAnimation, name) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Ray {
    pub position: Vector3,
    pub direction: Vector3,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Ray"][::std::mem::size_of::<Ray>() - 24usize];
    ["Alignment of Ray"][::std::mem::align_of::<Ray>() - 4usize];
    ["Offset of field: Ray::position"][::std::mem::offset_of!(Ray, position) - 0usize];
    ["Offset of field: Ray::direction"][::std::mem::offset_of!(Ray, direction) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayCollision {
    pub hit: bool,
    pub distance: f32,
    pub point: Vector3,
    pub normal: Vector3,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RayCollision"][::std::mem::size_of::<RayCollision>() - 32usize];
    ["Alignment of RayCollision"][::std::mem::align_of::<RayCollision>() - 4usize];
    ["Offset of field: RayCollision::hit"][::std::mem::offset_of!(RayCollision, hit) - 0usize];
    ["Offset of field: RayCollision::distance"]
        [::std::mem::offset_of!(RayCollision, distance) - 4usize];
    ["Offset of field: RayCollision::point"][::std::mem::offset_of!(RayCollision, point) - 8usize];
    ["Offset of field: RayCollision::normal"]
        [::std::mem::offset_of!(RayCollision, normal) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BoundingBox {
    pub min: Vector3,
    pub max: Vector3,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BoundingBox"][::std::mem::size_of::<BoundingBox>() - 24usize];
    ["Alignment of BoundingBox"][::std::mem::align_of::<BoundingBox>() - 4usize];
    ["Offset of field: BoundingBox::min"][::std::mem::offset_of!(BoundingBox, min) - 0usize];
    ["Offset of field: BoundingBox::max"][::std::mem::offset_of!(BoundingBox, max) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Wave {
    pub frameCount: ::std::os::raw::c_uint,
    pub sampleRate: ::std::os::raw::c_uint,
    pub sampleSize: ::std::os::raw::c_uint,
    pub channels: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Wave"][::std::mem::size_of::<Wave>() - 24usize];
    ["Alignment of Wave"][::std::mem::align_of::<Wave>() - 8usize];
    ["Offset of field: Wave::frameCount"][::std::mem::offset_of!(Wave, frameCount) - 0usize];
    ["Offset of field: Wave::sampleRate"][::std::mem::offset_of!(Wave, sampleRate) - 4usize];
    ["Offset of field: Wave::sampleSize"][::std::mem::offset_of!(Wave, sampleSize) - 8usize];
    ["Offset of field: Wave::channels"][::std::mem::offset_of!(Wave, channels) - 12usize];
    ["Offset of field: Wave::data"][::std::mem::offset_of!(Wave, data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rAudioBuffer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rAudioProcessor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioStream {
    pub buffer: *mut rAudioBuffer,
    pub processor: *mut rAudioProcessor,
    pub sampleRate: ::std::os::raw::c_uint,
    pub sampleSize: ::std::os::raw::c_uint,
    pub channels: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AudioStream"][::std::mem::size_of::<AudioStream>() - 32usize];
    ["Alignment of AudioStream"][::std::mem::align_of::<AudioStream>() - 8usize];
    ["Offset of field: AudioStream::buffer"][::std::mem::offset_of!(AudioStream, buffer) - 0usize];
    ["Offset of field: AudioStream::processor"]
        [::std::mem::offset_of!(AudioStream, processor) - 8usize];
    ["Offset of field: AudioStream::sampleRate"]
        [::std::mem::offset_of!(AudioStream, sampleRate) - 16usize];
    ["Offset of field: AudioStream::sampleSize"]
        [::std::mem::offset_of!(AudioStream, sampleSize) - 20usize];
    ["Offset of field: AudioStream::channels"]
        [::std::mem::offset_of!(AudioStream, channels) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Sound {
    pub stream: AudioStream,
    pub frameCount: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Sound"][::std::mem::size_of::<Sound>() - 40usize];
    ["Alignment of Sound"][::std::mem::align_of::<Sound>() - 8usize];
    ["Offset of field: Sound::stream"][::std::mem::offset_of!(Sound, stream) - 0usize];
    ["Offset of field: Sound::frameCount"][::std::mem::offset_of!(Sound, frameCount) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Music {
    pub stream: AudioStream,
    pub frameCount: ::std::os::raw::c_uint,
    pub looping: bool,
    pub ctxType: ::std::os::raw::c_int,
    pub ctxData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Music"][::std::mem::size_of::<Music>() - 56usize];
    ["Alignment of Music"][::std::mem::align_of::<Music>() - 8usize];
    ["Offset of field: Music::stream"][::std::mem::offset_of!(Music, stream) - 0usize];
    ["Offset of field: Music::frameCount"][::std::mem::offset_of!(Music, frameCount) - 32usize];
    ["Offset of field: Music::looping"][::std::mem::offset_of!(Music, looping) - 36usize];
    ["Offset of field: Music::ctxType"][::std::mem::offset_of!(Music, ctxType) - 40usize];
    ["Offset of field: Music::ctxData"][::std::mem::offset_of!(Music, ctxData) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VrDeviceInfo {
    pub hResolution: ::std::os::raw::c_int,
    pub vResolution: ::std::os::raw::c_int,
    pub hScreenSize: f32,
    pub vScreenSize: f32,
    pub vScreenCenter: f32,
    pub eyeToScreenDistance: f32,
    pub lensSeparationDistance: f32,
    pub interpupillaryDistance: f32,
    pub lensDistortionValues: [f32; 4usize],
    pub chromaAbCorrection: [f32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VrDeviceInfo"][::std::mem::size_of::<VrDeviceInfo>() - 64usize];
    ["Alignment of VrDeviceInfo"][::std::mem::align_of::<VrDeviceInfo>() - 4usize];
    ["Offset of field: VrDeviceInfo::hResolution"]
        [::std::mem::offset_of!(VrDeviceInfo, hResolution) - 0usize];
    ["Offset of field: VrDeviceInfo::vResolution"]
        [::std::mem::offset_of!(VrDeviceInfo, vResolution) - 4usize];
    ["Offset of field: VrDeviceInfo::hScreenSize"]
        [::std::mem::offset_of!(VrDeviceInfo, hScreenSize) - 8usize];
    ["Offset of field: VrDeviceInfo::vScreenSize"]
        [::std::mem::offset_of!(VrDeviceInfo, vScreenSize) - 12usize];
    ["Offset of field: VrDeviceInfo::vScreenCenter"]
        [::std::mem::offset_of!(VrDeviceInfo, vScreenCenter) - 16usize];
    ["Offset of field: VrDeviceInfo::eyeToScreenDistance"]
        [::std::mem::offset_of!(VrDeviceInfo, eyeToScreenDistance) - 20usize];
    ["Offset of field: VrDeviceInfo::lensSeparationDistance"]
        [::std::mem::offset_of!(VrDeviceInfo, lensSeparationDistance) - 24usize];
    ["Offset of field: VrDeviceInfo::interpupillaryDistance"]
        [::std::mem::offset_of!(VrDeviceInfo, interpupillaryDistance) - 28usize];
    ["Offset of field: VrDeviceInfo::lensDistortionValues"]
        [::std::mem::offset_of!(VrDeviceInfo, lensDistortionValues) - 32usize];
    ["Offset of field: VrDeviceInfo::chromaAbCorrection"]
        [::std::mem::offset_of!(VrDeviceInfo, chromaAbCorrection) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VrStereoConfig {
    pub projection: [Matrix; 2usize],
    pub viewOffset: [Matrix; 2usize],
    pub leftLensCenter: [f32; 2usize],
    pub rightLensCenter: [f32; 2usize],
    pub leftScreenCenter: [f32; 2usize],
    pub rightScreenCenter: [f32; 2usize],
    pub scale: [f32; 2usize],
    pub scaleIn: [f32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VrStereoConfig"][::std::mem::size_of::<VrStereoConfig>() - 304usize];
    ["Alignment of VrStereoConfig"][::std::mem::align_of::<VrStereoConfig>() - 4usize];
    ["Offset of field: VrStereoConfig::projection"]
        [::std::mem::offset_of!(VrStereoConfig, projection) - 0usize];
    ["Offset of field: VrStereoConfig::viewOffset"]
        [::std::mem::offset_of!(VrStereoConfig, viewOffset) - 128usize];
    ["Offset of field: VrStereoConfig::leftLensCenter"]
        [::std::mem::offset_of!(VrStereoConfig, leftLensCenter) - 256usize];
    ["Offset of field: VrStereoConfig::rightLensCenter"]
        [::std::mem::offset_of!(VrStereoConfig, rightLensCenter) - 264usize];
    ["Offset of field: VrStereoConfig::leftScreenCenter"]
        [::std::mem::offset_of!(VrStereoConfig, leftScreenCenter) - 272usize];
    ["Offset of field: VrStereoConfig::rightScreenCenter"]
        [::std::mem::offset_of!(VrStereoConfig, rightScreenCenter) - 280usize];
    ["Offset of field: VrStereoConfig::scale"]
        [::std::mem::offset_of!(VrStereoConfig, scale) - 288usize];
    ["Offset of field: VrStereoConfig::scaleIn"]
        [::std::mem::offset_of!(VrStereoConfig, scaleIn) - 296usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FilePathList {
    pub capacity: ::std::os::raw::c_uint,
    pub count: ::std::os::raw::c_uint,
    pub paths: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FilePathList"][::std::mem::size_of::<FilePathList>() - 16usize];
    ["Alignment of FilePathList"][::std::mem::align_of::<FilePathList>() - 8usize];
    ["Offset of field: FilePathList::capacity"]
        [::std::mem::offset_of!(FilePathList, capacity) - 0usize];
    ["Offset of field: FilePathList::count"][::std::mem::offset_of!(FilePathList, count) - 4usize];
    ["Offset of field: FilePathList::paths"][::std::mem::offset_of!(FilePathList, paths) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AutomationEvent {
    pub frame: ::std::os::raw::c_uint,
    pub type_: ::std::os::raw::c_uint,
    pub params: [::std::os::raw::c_int; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AutomationEvent"][::std::mem::size_of::<AutomationEvent>() - 24usize];
    ["Alignment of AutomationEvent"][::std::mem::align_of::<AutomationEvent>() - 4usize];
    ["Offset of field: AutomationEvent::frame"]
        [::std::mem::offset_of!(AutomationEvent, frame) - 0usize];
    ["Offset of field: AutomationEvent::type_"]
        [::std::mem::offset_of!(AutomationEvent, type_) - 4usize];
    ["Offset of field: AutomationEvent::params"]
        [::std::mem::offset_of!(AutomationEvent, params) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AutomationEventList {
    pub capacity: ::std::os::raw::c_uint,
    pub count: ::std::os::raw::c_uint,
    pub events: *mut AutomationEvent,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AutomationEventList"][::std::mem::size_of::<AutomationEventList>() - 16usize];
    ["Alignment of AutomationEventList"][::std::mem::align_of::<AutomationEventList>() - 8usize];
    ["Offset of field: AutomationEventList::capacity"]
        [::std::mem::offset_of!(AutomationEventList, capacity) - 0usize];
    ["Offset of field: AutomationEventList::count"]
        [::std::mem::offset_of!(AutomationEventList, count) - 4usize];
    ["Offset of field: AutomationEventList::events"]
        [::std::mem::offset_of!(AutomationEventList, events) - 8usize];
};
pub const ConfigFlags_FLAG_VSYNC_HINT: ConfigFlags = 64;
pub const ConfigFlags_FLAG_FULLSCREEN_MODE: ConfigFlags = 2;
pub const ConfigFlags_FLAG_WINDOW_RESIZABLE: ConfigFlags = 4;
pub const ConfigFlags_FLAG_WINDOW_UNDECORATED: ConfigFlags = 8;
pub const ConfigFlags_FLAG_WINDOW_HIDDEN: ConfigFlags = 128;
pub const ConfigFlags_FLAG_WINDOW_MINIMIZED: ConfigFlags = 512;
pub const ConfigFlags_FLAG_WINDOW_MAXIMIZED: ConfigFlags = 1024;
pub const ConfigFlags_FLAG_WINDOW_UNFOCUSED: ConfigFlags = 2048;
pub const ConfigFlags_FLAG_WINDOW_TOPMOST: ConfigFlags = 4096;
pub const ConfigFlags_FLAG_WINDOW_ALWAYS_RUN: ConfigFlags = 256;
pub const ConfigFlags_FLAG_WINDOW_TRANSPARENT: ConfigFlags = 16;
pub const ConfigFlags_FLAG_WINDOW_HIGHDPI: ConfigFlags = 8192;
pub const ConfigFlags_FLAG_WINDOW_MOUSE_PASSTHROUGH: ConfigFlags = 16384;
pub const ConfigFlags_FLAG_BORDERLESS_WINDOWED_MODE: ConfigFlags = 32768;
pub const ConfigFlags_FLAG_MSAA_4X_HINT: ConfigFlags = 32;
pub const ConfigFlags_FLAG_INTERLACED_HINT: ConfigFlags = 65536;
pub type ConfigFlags = ::std::os::raw::c_int;
pub const TraceLogLevel_LOG_ALL: TraceLogLevel = 0;
pub const TraceLogLevel_LOG_TRACE: TraceLogLevel = 1;
pub const TraceLogLevel_LOG_DEBUG: TraceLogLevel = 2;
pub const TraceLogLevel_LOG_INFO: TraceLogLevel = 3;
pub const TraceLogLevel_LOG_WARNING: TraceLogLevel = 4;
pub const TraceLogLevel_LOG_ERROR: TraceLogLevel = 5;
pub const TraceLogLevel_LOG_FATAL: TraceLogLevel = 6;
pub const TraceLogLevel_LOG_NONE: TraceLogLevel = 7;
pub type TraceLogLevel = ::std::os::raw::c_int;
pub const KeyboardKey_KEY_NULL: KeyboardKey = 0;
pub const KeyboardKey_KEY_APOSTROPHE: KeyboardKey = 39;
pub const KeyboardKey_KEY_COMMA: KeyboardKey = 44;
pub const KeyboardKey_KEY_MINUS: KeyboardKey = 45;
pub const KeyboardKey_KEY_PERIOD: KeyboardKey = 46;
pub const KeyboardKey_KEY_SLASH: KeyboardKey = 47;
pub const KeyboardKey_KEY_ZERO: KeyboardKey = 48;
pub const KeyboardKey_KEY_ONE: KeyboardKey = 49;
pub const KeyboardKey_KEY_TWO: KeyboardKey = 50;
pub const KeyboardKey_KEY_THREE: KeyboardKey = 51;
pub const KeyboardKey_KEY_FOUR: KeyboardKey = 52;
pub const KeyboardKey_KEY_FIVE: KeyboardKey = 53;
pub const KeyboardKey_KEY_SIX: KeyboardKey = 54;
pub const KeyboardKey_KEY_SEVEN: KeyboardKey = 55;
pub const KeyboardKey_KEY_EIGHT: KeyboardKey = 56;
pub const KeyboardKey_KEY_NINE: KeyboardKey = 57;
pub const KeyboardKey_KEY_SEMICOLON: KeyboardKey = 59;
pub const KeyboardKey_KEY_EQUAL: KeyboardKey = 61;
pub const KeyboardKey_KEY_A: KeyboardKey = 65;
pub const KeyboardKey_KEY_B: KeyboardKey = 66;
pub const KeyboardKey_KEY_C: KeyboardKey = 67;
pub const KeyboardKey_KEY_D: KeyboardKey = 68;
pub const KeyboardKey_KEY_E: KeyboardKey = 69;
pub const KeyboardKey_KEY_F: KeyboardKey = 70;
pub const KeyboardKey_KEY_G: KeyboardKey = 71;
pub const KeyboardKey_KEY_H: KeyboardKey = 72;
pub const KeyboardKey_KEY_I: KeyboardKey = 73;
pub const KeyboardKey_KEY_J: KeyboardKey = 74;
pub const KeyboardKey_KEY_K: KeyboardKey = 75;
pub const KeyboardKey_KEY_L: KeyboardKey = 76;
pub const KeyboardKey_KEY_M: KeyboardKey = 77;
pub const KeyboardKey_KEY_N: KeyboardKey = 78;
pub const KeyboardKey_KEY_O: KeyboardKey = 79;
pub const KeyboardKey_KEY_P: KeyboardKey = 80;
pub const KeyboardKey_KEY_Q: KeyboardKey = 81;
pub const KeyboardKey_KEY_R: KeyboardKey = 82;
pub const KeyboardKey_KEY_S: KeyboardKey = 83;
pub const KeyboardKey_KEY_T: KeyboardKey = 84;
pub const KeyboardKey_KEY_U: KeyboardKey = 85;
pub const KeyboardKey_KEY_V: KeyboardKey = 86;
pub const KeyboardKey_KEY_W: KeyboardKey = 87;
pub const KeyboardKey_KEY_X: KeyboardKey = 88;
pub const KeyboardKey_KEY_Y: KeyboardKey = 89;
pub const KeyboardKey_KEY_Z: KeyboardKey = 90;
pub const KeyboardKey_KEY_LEFT_BRACKET: KeyboardKey = 91;
pub const KeyboardKey_KEY_BACKSLASH: KeyboardKey = 92;
pub const KeyboardKey_KEY_RIGHT_BRACKET: KeyboardKey = 93;
pub const KeyboardKey_KEY_GRAVE: KeyboardKey = 96;
pub const KeyboardKey_KEY_SPACE: KeyboardKey = 32;
pub const KeyboardKey_KEY_ESCAPE: KeyboardKey = 256;
pub const KeyboardKey_KEY_ENTER: KeyboardKey = 257;
pub const KeyboardKey_KEY_TAB: KeyboardKey = 258;
pub const KeyboardKey_KEY_BACKSPACE: KeyboardKey = 259;
pub const KeyboardKey_KEY_INSERT: KeyboardKey = 260;
pub const KeyboardKey_KEY_DELETE: KeyboardKey = 261;
pub const KeyboardKey_KEY_RIGHT: KeyboardKey = 262;
pub const KeyboardKey_KEY_LEFT: KeyboardKey = 263;
pub const KeyboardKey_KEY_DOWN: KeyboardKey = 264;
pub const KeyboardKey_KEY_UP: KeyboardKey = 265;
pub const KeyboardKey_KEY_PAGE_UP: KeyboardKey = 266;
pub const KeyboardKey_KEY_PAGE_DOWN: KeyboardKey = 267;
pub const KeyboardKey_KEY_HOME: KeyboardKey = 268;
pub const KeyboardKey_KEY_END: KeyboardKey = 269;
pub const KeyboardKey_KEY_CAPS_LOCK: KeyboardKey = 280;
pub const KeyboardKey_KEY_SCROLL_LOCK: KeyboardKey = 281;
pub const KeyboardKey_KEY_NUM_LOCK: KeyboardKey = 282;
pub const KeyboardKey_KEY_PRINT_SCREEN: KeyboardKey = 283;
pub const KeyboardKey_KEY_PAUSE: KeyboardKey = 284;
pub const KeyboardKey_KEY_F1: KeyboardKey = 290;
pub const KeyboardKey_KEY_F2: KeyboardKey = 291;
pub const KeyboardKey_KEY_F3: KeyboardKey = 292;
pub const KeyboardKey_KEY_F4: KeyboardKey = 293;
pub const KeyboardKey_KEY_F5: KeyboardKey = 294;
pub const KeyboardKey_KEY_F6: KeyboardKey = 295;
pub const KeyboardKey_KEY_F7: KeyboardKey = 296;
pub const KeyboardKey_KEY_F8: KeyboardKey = 297;
pub const KeyboardKey_KEY_F9: KeyboardKey = 298;
pub const KeyboardKey_KEY_F10: KeyboardKey = 299;
pub const KeyboardKey_KEY_F11: KeyboardKey = 300;
pub const KeyboardKey_KEY_F12: KeyboardKey = 301;
pub const KeyboardKey_KEY_LEFT_SHIFT: KeyboardKey = 340;
pub const KeyboardKey_KEY_LEFT_CONTROL: KeyboardKey = 341;
pub const KeyboardKey_KEY_LEFT_ALT: KeyboardKey = 342;
pub const KeyboardKey_KEY_LEFT_SUPER: KeyboardKey = 343;
pub const KeyboardKey_KEY_RIGHT_SHIFT: KeyboardKey = 344;
pub const KeyboardKey_KEY_RIGHT_CONTROL: KeyboardKey = 345;
pub const KeyboardKey_KEY_RIGHT_ALT: KeyboardKey = 346;
pub const KeyboardKey_KEY_RIGHT_SUPER: KeyboardKey = 347;
pub const KeyboardKey_KEY_KB_MENU: KeyboardKey = 348;
pub const KeyboardKey_KEY_KP_0: KeyboardKey = 320;
pub const KeyboardKey_KEY_KP_1: KeyboardKey = 321;
pub const KeyboardKey_KEY_KP_2: KeyboardKey = 322;
pub const KeyboardKey_KEY_KP_3: KeyboardKey = 323;
pub const KeyboardKey_KEY_KP_4: KeyboardKey = 324;
pub const KeyboardKey_KEY_KP_5: KeyboardKey = 325;
pub const KeyboardKey_KEY_KP_6: KeyboardKey = 326;
pub const KeyboardKey_KEY_KP_7: KeyboardKey = 327;
pub const KeyboardKey_KEY_KP_8: KeyboardKey = 328;
pub const KeyboardKey_KEY_KP_9: KeyboardKey = 329;
pub const KeyboardKey_KEY_KP_DECIMAL: KeyboardKey = 330;
pub const KeyboardKey_KEY_KP_DIVIDE: KeyboardKey = 331;
pub const KeyboardKey_KEY_KP_MULTIPLY: KeyboardKey = 332;
pub const KeyboardKey_KEY_KP_SUBTRACT: KeyboardKey = 333;
pub const KeyboardKey_KEY_KP_ADD: KeyboardKey = 334;
pub const KeyboardKey_KEY_KP_ENTER: KeyboardKey = 335;
pub const KeyboardKey_KEY_KP_EQUAL: KeyboardKey = 336;
pub const KeyboardKey_KEY_BACK: KeyboardKey = 4;
pub const KeyboardKey_KEY_MENU: KeyboardKey = 82;
pub const KeyboardKey_KEY_VOLUME_UP: KeyboardKey = 24;
pub const KeyboardKey_KEY_VOLUME_DOWN: KeyboardKey = 25;
pub type KeyboardKey = ::std::os::raw::c_int;
pub const MouseButton_MOUSE_BUTTON_LEFT: MouseButton = 0;
pub const MouseButton_MOUSE_BUTTON_RIGHT: MouseButton = 1;
pub const MouseButton_MOUSE_BUTTON_MIDDLE: MouseButton = 2;
pub const MouseButton_MOUSE_BUTTON_SIDE: MouseButton = 3;
pub const MouseButton_MOUSE_BUTTON_EXTRA: MouseButton = 4;
pub const MouseButton_MOUSE_BUTTON_FORWARD: MouseButton = 5;
pub const MouseButton_MOUSE_BUTTON_BACK: MouseButton = 6;
pub type MouseButton = ::std::os::raw::c_int;
pub const MouseCursor_MOUSE_CURSOR_DEFAULT: MouseCursor = 0;
pub const MouseCursor_MOUSE_CURSOR_ARROW: MouseCursor = 1;
pub const MouseCursor_MOUSE_CURSOR_IBEAM: MouseCursor = 2;
pub const MouseCursor_MOUSE_CURSOR_CROSSHAIR: MouseCursor = 3;
pub const MouseCursor_MOUSE_CURSOR_POINTING_HAND: MouseCursor = 4;
pub const MouseCursor_MOUSE_CURSOR_RESIZE_EW: MouseCursor = 5;
pub const MouseCursor_MOUSE_CURSOR_RESIZE_NS: MouseCursor = 6;
pub const MouseCursor_MOUSE_CURSOR_RESIZE_NWSE: MouseCursor = 7;
pub const MouseCursor_MOUSE_CURSOR_RESIZE_NESW: MouseCursor = 8;
pub const MouseCursor_MOUSE_CURSOR_RESIZE_ALL: MouseCursor = 9;
pub const MouseCursor_MOUSE_CURSOR_NOT_ALLOWED: MouseCursor = 10;
pub type MouseCursor = ::std::os::raw::c_int;
pub const GamepadButton_GAMEPAD_BUTTON_UNKNOWN: GamepadButton = 0;
pub const GamepadButton_GAMEPAD_BUTTON_LEFT_FACE_UP: GamepadButton = 1;
pub const GamepadButton_GAMEPAD_BUTTON_LEFT_FACE_RIGHT: GamepadButton = 2;
pub const GamepadButton_GAMEPAD_BUTTON_LEFT_FACE_DOWN: GamepadButton = 3;
pub const GamepadButton_GAMEPAD_BUTTON_LEFT_FACE_LEFT: GamepadButton = 4;
pub const GamepadButton_GAMEPAD_BUTTON_RIGHT_FACE_UP: GamepadButton = 5;
pub const GamepadButton_GAMEPAD_BUTTON_RIGHT_FACE_RIGHT: GamepadButton = 6;
pub const GamepadButton_GAMEPAD_BUTTON_RIGHT_FACE_DOWN: GamepadButton = 7;
pub const GamepadButton_GAMEPAD_BUTTON_RIGHT_FACE_LEFT: GamepadButton = 8;
pub const GamepadButton_GAMEPAD_BUTTON_LEFT_TRIGGER_1: GamepadButton = 9;
pub const GamepadButton_GAMEPAD_BUTTON_LEFT_TRIGGER_2: GamepadButton = 10;
pub const GamepadButton_GAMEPAD_BUTTON_RIGHT_TRIGGER_1: GamepadButton = 11;
pub const GamepadButton_GAMEPAD_BUTTON_RIGHT_TRIGGER_2: GamepadButton = 12;
pub const GamepadButton_GAMEPAD_BUTTON_MIDDLE_LEFT: GamepadButton = 13;
pub const GamepadButton_GAMEPAD_BUTTON_MIDDLE: GamepadButton = 14;
pub const GamepadButton_GAMEPAD_BUTTON_MIDDLE_RIGHT: GamepadButton = 15;
pub const GamepadButton_GAMEPAD_BUTTON_LEFT_THUMB: GamepadButton = 16;
pub const GamepadButton_GAMEPAD_BUTTON_RIGHT_THUMB: GamepadButton = 17;
pub type GamepadButton = ::std::os::raw::c_int;
pub const GamepadAxis_GAMEPAD_AXIS_LEFT_X: GamepadAxis = 0;
pub const GamepadAxis_GAMEPAD_AXIS_LEFT_Y: GamepadAxis = 1;
pub const GamepadAxis_GAMEPAD_AXIS_RIGHT_X: GamepadAxis = 2;
pub const GamepadAxis_GAMEPAD_AXIS_RIGHT_Y: GamepadAxis = 3;
pub const GamepadAxis_GAMEPAD_AXIS_LEFT_TRIGGER: GamepadAxis = 4;
pub const GamepadAxis_GAMEPAD_AXIS_RIGHT_TRIGGER: GamepadAxis = 5;
pub type GamepadAxis = ::std::os::raw::c_int;
pub const MaterialMapIndex_MATERIAL_MAP_ALBEDO: MaterialMapIndex = 0;
pub const MaterialMapIndex_MATERIAL_MAP_METALNESS: MaterialMapIndex = 1;
pub const MaterialMapIndex_MATERIAL_MAP_NORMAL: MaterialMapIndex = 2;
pub const MaterialMapIndex_MATERIAL_MAP_ROUGHNESS: MaterialMapIndex = 3;
pub const MaterialMapIndex_MATERIAL_MAP_OCCLUSION: MaterialMapIndex = 4;
pub const MaterialMapIndex_MATERIAL_MAP_EMISSION: MaterialMapIndex = 5;
pub const MaterialMapIndex_MATERIAL_MAP_HEIGHT: MaterialMapIndex = 6;
pub const MaterialMapIndex_MATERIAL_MAP_CUBEMAP: MaterialMapIndex = 7;
pub const MaterialMapIndex_MATERIAL_MAP_IRRADIANCE: MaterialMapIndex = 8;
pub const MaterialMapIndex_MATERIAL_MAP_PREFILTER: MaterialMapIndex = 9;
pub const MaterialMapIndex_MATERIAL_MAP_BRDF: MaterialMapIndex = 10;
pub type MaterialMapIndex = ::std::os::raw::c_int;
pub const ShaderLocationIndex_SHADER_LOC_VERTEX_POSITION: ShaderLocationIndex = 0;
pub const ShaderLocationIndex_SHADER_LOC_VERTEX_TEXCOORD01: ShaderLocationIndex = 1;
pub const ShaderLocationIndex_SHADER_LOC_VERTEX_TEXCOORD02: ShaderLocationIndex = 2;
pub const ShaderLocationIndex_SHADER_LOC_VERTEX_NORMAL: ShaderLocationIndex = 3;
pub const ShaderLocationIndex_SHADER_LOC_VERTEX_TANGENT: ShaderLocationIndex = 4;
pub const ShaderLocationIndex_SHADER_LOC_VERTEX_COLOR: ShaderLocationIndex = 5;
pub const ShaderLocationIndex_SHADER_LOC_MATRIX_MVP: ShaderLocationIndex = 6;
pub const ShaderLocationIndex_SHADER_LOC_MATRIX_VIEW: ShaderLocationIndex = 7;
pub const ShaderLocationIndex_SHADER_LOC_MATRIX_PROJECTION: ShaderLocationIndex = 8;
pub const ShaderLocationIndex_SHADER_LOC_MATRIX_MODEL: ShaderLocationIndex = 9;
pub const ShaderLocationIndex_SHADER_LOC_MATRIX_NORMAL: ShaderLocationIndex = 10;
pub const ShaderLocationIndex_SHADER_LOC_VECTOR_VIEW: ShaderLocationIndex = 11;
pub const ShaderLocationIndex_SHADER_LOC_COLOR_DIFFUSE: ShaderLocationIndex = 12;
pub const ShaderLocationIndex_SHADER_LOC_COLOR_SPECULAR: ShaderLocationIndex = 13;
pub const ShaderLocationIndex_SHADER_LOC_COLOR_AMBIENT: ShaderLocationIndex = 14;
pub const ShaderLocationIndex_SHADER_LOC_MAP_ALBEDO: ShaderLocationIndex = 15;
pub const ShaderLocationIndex_SHADER_LOC_MAP_METALNESS: ShaderLocationIndex = 16;
pub const ShaderLocationIndex_SHADER_LOC_MAP_NORMAL: ShaderLocationIndex = 17;
pub const ShaderLocationIndex_SHADER_LOC_MAP_ROUGHNESS: ShaderLocationIndex = 18;
pub const ShaderLocationIndex_SHADER_LOC_MAP_OCCLUSION: ShaderLocationIndex = 19;
pub const ShaderLocationIndex_SHADER_LOC_MAP_EMISSION: ShaderLocationIndex = 20;
pub const ShaderLocationIndex_SHADER_LOC_MAP_HEIGHT: ShaderLocationIndex = 21;
pub const ShaderLocationIndex_SHADER_LOC_MAP_CUBEMAP: ShaderLocationIndex = 22;
pub const ShaderLocationIndex_SHADER_LOC_MAP_IRRADIANCE: ShaderLocationIndex = 23;
pub const ShaderLocationIndex_SHADER_LOC_MAP_PREFILTER: ShaderLocationIndex = 24;
pub const ShaderLocationIndex_SHADER_LOC_MAP_BRDF: ShaderLocationIndex = 25;
pub type ShaderLocationIndex = ::std::os::raw::c_int;
pub const ShaderUniformDataType_SHADER_UNIFORM_FLOAT: ShaderUniformDataType = 0;
pub const ShaderUniformDataType_SHADER_UNIFORM_VEC2: ShaderUniformDataType = 1;
pub const ShaderUniformDataType_SHADER_UNIFORM_VEC3: ShaderUniformDataType = 2;
pub const ShaderUniformDataType_SHADER_UNIFORM_VEC4: ShaderUniformDataType = 3;
pub const ShaderUniformDataType_SHADER_UNIFORM_INT: ShaderUniformDataType = 4;
pub const ShaderUniformDataType_SHADER_UNIFORM_IVEC2: ShaderUniformDataType = 5;
pub const ShaderUniformDataType_SHADER_UNIFORM_IVEC3: ShaderUniformDataType = 6;
pub const ShaderUniformDataType_SHADER_UNIFORM_IVEC4: ShaderUniformDataType = 7;
pub const ShaderUniformDataType_SHADER_UNIFORM_SAMPLER2D: ShaderUniformDataType = 8;
pub type ShaderUniformDataType = ::std::os::raw::c_int;
pub const ShaderAttributeDataType_SHADER_ATTRIB_FLOAT: ShaderAttributeDataType = 0;
pub const ShaderAttributeDataType_SHADER_ATTRIB_VEC2: ShaderAttributeDataType = 1;
pub const ShaderAttributeDataType_SHADER_ATTRIB_VEC3: ShaderAttributeDataType = 2;
pub const ShaderAttributeDataType_SHADER_ATTRIB_VEC4: ShaderAttributeDataType = 3;
pub type ShaderAttributeDataType = ::std::os::raw::c_int;
pub const PixelFormat_PIXELFORMAT_UNCOMPRESSED_GRAYSCALE: PixelFormat = 1;
pub const PixelFormat_PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA: PixelFormat = 2;
pub const PixelFormat_PIXELFORMAT_UNCOMPRESSED_R5G6B5: PixelFormat = 3;
pub const PixelFormat_PIXELFORMAT_UNCOMPRESSED_R8G8B8: PixelFormat = 4;
pub const PixelFormat_PIXELFORMAT_UNCOMPRESSED_R5G5B5A1: PixelFormat = 5;
pub const PixelFormat_PIXELFORMAT_UNCOMPRESSED_R4G4B4A4: PixelFormat = 6;
pub const PixelFormat_PIXELFORMAT_UNCOMPRESSED_R8G8B8A8: PixelFormat = 7;
pub const PixelFormat_PIXELFORMAT_UNCOMPRESSED_R32: PixelFormat = 8;
pub const PixelFormat_PIXELFORMAT_UNCOMPRESSED_R32G32B32: PixelFormat = 9;
pub const PixelFormat_PIXELFORMAT_UNCOMPRESSED_R32G32B32A32: PixelFormat = 10;
pub const PixelFormat_PIXELFORMAT_UNCOMPRESSED_R16: PixelFormat = 11;
pub const PixelFormat_PIXELFORMAT_UNCOMPRESSED_R16G16B16: PixelFormat = 12;
pub const PixelFormat_PIXELFORMAT_UNCOMPRESSED_R16G16B16A16: PixelFormat = 13;
pub const PixelFormat_PIXELFORMAT_COMPRESSED_DXT1_RGB: PixelFormat = 14;
pub const PixelFormat_PIXELFORMAT_COMPRESSED_DXT1_RGBA: PixelFormat = 15;
pub const PixelFormat_PIXELFORMAT_COMPRESSED_DXT3_RGBA: PixelFormat = 16;
pub const PixelFormat_PIXELFORMAT_COMPRESSED_DXT5_RGBA: PixelFormat = 17;
pub const PixelFormat_PIXELFORMAT_COMPRESSED_ETC1_RGB: PixelFormat = 18;
pub const PixelFormat_PIXELFORMAT_COMPRESSED_ETC2_RGB: PixelFormat = 19;
pub const PixelFormat_PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA: PixelFormat = 20;
pub const PixelFormat_PIXELFORMAT_COMPRESSED_PVRT_RGB: PixelFormat = 21;
pub const PixelFormat_PIXELFORMAT_COMPRESSED_PVRT_RGBA: PixelFormat = 22;
pub const PixelFormat_PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA: PixelFormat = 23;
pub const PixelFormat_PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA: PixelFormat = 24;
pub type PixelFormat = ::std::os::raw::c_int;
pub const TextureFilter_TEXTURE_FILTER_POINT: TextureFilter = 0;
pub const TextureFilter_TEXTURE_FILTER_BILINEAR: TextureFilter = 1;
pub const TextureFilter_TEXTURE_FILTER_TRILINEAR: TextureFilter = 2;
pub const TextureFilter_TEXTURE_FILTER_ANISOTROPIC_4X: TextureFilter = 3;
pub const TextureFilter_TEXTURE_FILTER_ANISOTROPIC_8X: TextureFilter = 4;
pub const TextureFilter_TEXTURE_FILTER_ANISOTROPIC_16X: TextureFilter = 5;
pub type TextureFilter = ::std::os::raw::c_int;
pub const TextureWrap_TEXTURE_WRAP_REPEAT: TextureWrap = 0;
pub const TextureWrap_TEXTURE_WRAP_CLAMP: TextureWrap = 1;
pub const TextureWrap_TEXTURE_WRAP_MIRROR_REPEAT: TextureWrap = 2;
pub const TextureWrap_TEXTURE_WRAP_MIRROR_CLAMP: TextureWrap = 3;
pub type TextureWrap = ::std::os::raw::c_int;
pub const CubemapLayout_CUBEMAP_LAYOUT_AUTO_DETECT: CubemapLayout = 0;
pub const CubemapLayout_CUBEMAP_LAYOUT_LINE_VERTICAL: CubemapLayout = 1;
pub const CubemapLayout_CUBEMAP_LAYOUT_LINE_HORIZONTAL: CubemapLayout = 2;
pub const CubemapLayout_CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR: CubemapLayout = 3;
pub const CubemapLayout_CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE: CubemapLayout = 4;
pub const CubemapLayout_CUBEMAP_LAYOUT_PANORAMA: CubemapLayout = 5;
pub type CubemapLayout = ::std::os::raw::c_int;
pub const FontType_FONT_DEFAULT: FontType = 0;
pub const FontType_FONT_BITMAP: FontType = 1;
pub const FontType_FONT_SDF: FontType = 2;
pub type FontType = ::std::os::raw::c_int;
pub const BlendMode_BLEND_ALPHA: BlendMode = 0;
pub const BlendMode_BLEND_ADDITIVE: BlendMode = 1;
pub const BlendMode_BLEND_MULTIPLIED: BlendMode = 2;
pub const BlendMode_BLEND_ADD_COLORS: BlendMode = 3;
pub const BlendMode_BLEND_SUBTRACT_COLORS: BlendMode = 4;
pub const BlendMode_BLEND_ALPHA_PREMULTIPLY: BlendMode = 5;
pub const BlendMode_BLEND_CUSTOM: BlendMode = 6;
pub const BlendMode_BLEND_CUSTOM_SEPARATE: BlendMode = 7;
pub type BlendMode = ::std::os::raw::c_int;
pub const Gesture_GESTURE_NONE: Gesture = 0;
pub const Gesture_GESTURE_TAP: Gesture = 1;
pub const Gesture_GESTURE_DOUBLETAP: Gesture = 2;
pub const Gesture_GESTURE_HOLD: Gesture = 4;
pub const Gesture_GESTURE_DRAG: Gesture = 8;
pub const Gesture_GESTURE_SWIPE_RIGHT: Gesture = 16;
pub const Gesture_GESTURE_SWIPE_LEFT: Gesture = 32;
pub const Gesture_GESTURE_SWIPE_UP: Gesture = 64;
pub const Gesture_GESTURE_SWIPE_DOWN: Gesture = 128;
pub const Gesture_GESTURE_PINCH_IN: Gesture = 256;
pub const Gesture_GESTURE_PINCH_OUT: Gesture = 512;
pub type Gesture = ::std::os::raw::c_int;
pub const CameraMode_CAMERA_CUSTOM: CameraMode = 0;
pub const CameraMode_CAMERA_FREE: CameraMode = 1;
pub const CameraMode_CAMERA_ORBITAL: CameraMode = 2;
pub const CameraMode_CAMERA_FIRST_PERSON: CameraMode = 3;
pub const CameraMode_CAMERA_THIRD_PERSON: CameraMode = 4;
pub type CameraMode = ::std::os::raw::c_int;
pub const CameraProjection_CAMERA_PERSPECTIVE: CameraProjection = 0;
pub const CameraProjection_CAMERA_ORTHOGRAPHIC: CameraProjection = 1;
pub type CameraProjection = ::std::os::raw::c_int;
pub const NPatchLayout_NPATCH_NINE_PATCH: NPatchLayout = 0;
pub const NPatchLayout_NPATCH_THREE_PATCH_VERTICAL: NPatchLayout = 1;
pub const NPatchLayout_NPATCH_THREE_PATCH_HORIZONTAL: NPatchLayout = 2;
pub type NPatchLayout = ::std::os::raw::c_int;
pub type TraceLogCallback = ::std::option::Option<
    unsafe extern "C" fn(
        logLevel: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        args: va_list,
    ),
>;
pub type LoadFileDataCallback = ::std::option::Option<
    unsafe extern "C" fn(
        fileName: *const ::std::os::raw::c_char,
        dataSize: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar,
>;
pub type SaveFileDataCallback = ::std::option::Option<
    unsafe extern "C" fn(
        fileName: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        dataSize: ::std::os::raw::c_int,
    ) -> bool,
>;
pub type LoadFileTextCallback = ::std::option::Option<
    unsafe extern "C" fn(fileName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
>;
pub type SaveFileTextCallback = ::std::option::Option<
    unsafe extern "C" fn(
        fileName: *const ::std::os::raw::c_char,
        text: *mut ::std::os::raw::c_char,
    ) -> bool,
>;
extern "C" {
    pub fn InitWindow(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn CloseWindow();
}
extern "C" {
    pub fn WindowShouldClose() -> bool;
}
extern "C" {
    pub fn IsWindowReady() -> bool;
}
extern "C" {
    pub fn IsWindowFullscreen() -> bool;
}
extern "C" {
    pub fn IsWindowHidden() -> bool;
}
extern "C" {
    pub fn IsWindowMinimized() -> bool;
}
extern "C" {
    pub fn IsWindowMaximized() -> bool;
}
extern "C" {
    pub fn IsWindowFocused() -> bool;
}
extern "C" {
    pub fn IsWindowResized() -> bool;
}
extern "C" {
    pub fn IsWindowState(flag: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn SetWindowState(flags: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn ClearWindowState(flags: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn ToggleFullscreen();
}
extern "C" {
    pub fn ToggleBorderlessWindowed();
}
extern "C" {
    pub fn MaximizeWindow();
}
extern "C" {
    pub fn MinimizeWindow();
}
extern "C" {
    pub fn RestoreWindow();
}
extern "C" {
    pub fn SetWindowIcon(image: Image);
}
extern "C" {
    pub fn SetWindowIcons(images: *mut Image, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SetWindowTitle(title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn SetWindowPosition(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SetWindowMonitor(monitor: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SetWindowMinSize(width: ::std::os::raw::c_int, height: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SetWindowMaxSize(width: ::std::os::raw::c_int, height: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SetWindowSize(width: ::std::os::raw::c_int, height: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SetWindowOpacity(opacity: f32);
}
extern "C" {
    pub fn SetWindowFocused();
}
extern "C" {
    pub fn GetWindowHandle() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GetScreenWidth() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetScreenHeight() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetRenderWidth() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetRenderHeight() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetMonitorCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetCurrentMonitor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetMonitorPosition(monitor: ::std::os::raw::c_int) -> Vector2;
}
extern "C" {
    pub fn GetMonitorWidth(monitor: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetMonitorHeight(monitor: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetMonitorPhysicalWidth(monitor: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetMonitorPhysicalHeight(monitor: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetMonitorRefreshRate(monitor: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetWindowPosition() -> Vector2;
}
extern "C" {
    pub fn GetWindowScaleDPI() -> Vector2;
}
extern "C" {
    pub fn GetMonitorName(monitor: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SetClipboardText(text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn GetClipboardText() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn EnableEventWaiting();
}
extern "C" {
    pub fn DisableEventWaiting();
}
extern "C" {
    pub fn ShowCursor();
}
extern "C" {
    pub fn HideCursor();
}
extern "C" {
    pub fn IsCursorHidden() -> bool;
}
extern "C" {
    pub fn EnableCursor();
}
extern "C" {
    pub fn DisableCursor();
}
extern "C" {
    pub fn IsCursorOnScreen() -> bool;
}
extern "C" {
    pub fn ClearBackground(color: Color);
}
extern "C" {
    pub fn BeginDrawing();
}
extern "C" {
    pub fn EndDrawing();
}
extern "C" {
    pub fn BeginMode2D(camera: Camera2D);
}
extern "C" {
    pub fn EndMode2D();
}
extern "C" {
    pub fn BeginMode3D(camera: Camera3D);
}
extern "C" {
    pub fn EndMode3D();
}
extern "C" {
    pub fn BeginTextureMode(target: RenderTexture2D);
}
extern "C" {
    pub fn EndTextureMode();
}
extern "C" {
    pub fn BeginShaderMode(shader: Shader);
}
extern "C" {
    pub fn EndShaderMode();
}
extern "C" {
    pub fn BeginBlendMode(mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn EndBlendMode();
}
extern "C" {
    pub fn BeginScissorMode(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn EndScissorMode();
}
extern "C" {
    pub fn BeginVrStereoMode(config: VrStereoConfig);
}
extern "C" {
    pub fn EndVrStereoMode();
}
extern "C" {
    pub fn LoadVrStereoConfig(device: VrDeviceInfo) -> VrStereoConfig;
}
extern "C" {
    pub fn UnloadVrStereoConfig(config: VrStereoConfig);
}
extern "C" {
    pub fn LoadShader(
        vsFileName: *const ::std::os::raw::c_char,
        fsFileName: *const ::std::os::raw::c_char,
    ) -> Shader;
}
extern "C" {
    pub fn LoadShaderFromMemory(
        vsCode: *const ::std::os::raw::c_char,
        fsCode: *const ::std::os::raw::c_char,
    ) -> Shader;
}
extern "C" {
    pub fn IsShaderReady(shader: Shader) -> bool;
}
extern "C" {
    pub fn GetShaderLocation(
        shader: Shader,
        uniformName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetShaderLocationAttrib(
        shader: Shader,
        attribName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SetShaderValue(
        shader: Shader,
        locIndex: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_void,
        uniformType: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SetShaderValueV(
        shader: Shader,
        locIndex: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_void,
        uniformType: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SetShaderValueMatrix(shader: Shader, locIndex: ::std::os::raw::c_int, mat: Matrix);
}
extern "C" {
    pub fn SetShaderValueTexture(
        shader: Shader,
        locIndex: ::std::os::raw::c_int,
        texture: Texture2D,
    );
}
extern "C" {
    pub fn UnloadShader(shader: Shader);
}
extern "C" {
    pub fn GetMouseRay(mousePosition: Vector2, camera: Camera) -> Ray;
}
extern "C" {
    pub fn GetCameraMatrix(camera: Camera) -> Matrix;
}
extern "C" {
    pub fn GetCameraMatrix2D(camera: Camera2D) -> Matrix;
}
extern "C" {
    pub fn GetWorldToScreen(position: Vector3, camera: Camera) -> Vector2;
}
extern "C" {
    pub fn GetScreenToWorld2D(position: Vector2, camera: Camera2D) -> Vector2;
}
extern "C" {
    pub fn GetWorldToScreenEx(
        position: Vector3,
        camera: Camera,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> Vector2;
}
extern "C" {
    pub fn GetWorldToScreen2D(position: Vector2, camera: Camera2D) -> Vector2;
}
extern "C" {
    pub fn SetTargetFPS(fps: ::std::os::raw::c_int);
}
extern "C" {
    pub fn GetFrameTime() -> f32;
}
extern "C" {
    pub fn GetTime() -> f64;
}
extern "C" {
    pub fn GetFPS() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SwapScreenBuffer();
}
extern "C" {
    pub fn PollInputEvents();
}
extern "C" {
    pub fn WaitTime(seconds: f64);
}
extern "C" {
    pub fn SetRandomSeed(seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn GetRandomValue(
        min: ::std::os::raw::c_int,
        max: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LoadRandomSequence(
        count: ::std::os::raw::c_uint,
        min: ::std::os::raw::c_int,
        max: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn UnloadRandomSequence(sequence: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn TakeScreenshot(fileName: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn SetConfigFlags(flags: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn OpenURL(url: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn TraceLog(logLevel: ::std::os::raw::c_int, text: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn SetTraceLogLevel(logLevel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn MemAlloc(size: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn MemRealloc(
        ptr: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn MemFree(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn SetTraceLogCallback(callback: TraceLogCallback);
}
extern "C" {
    pub fn SetLoadFileDataCallback(callback: LoadFileDataCallback);
}
extern "C" {
    pub fn SetSaveFileDataCallback(callback: SaveFileDataCallback);
}
extern "C" {
    pub fn SetLoadFileTextCallback(callback: LoadFileTextCallback);
}
extern "C" {
    pub fn SetSaveFileTextCallback(callback: SaveFileTextCallback);
}
extern "C" {
    pub fn LoadFileData(
        fileName: *const ::std::os::raw::c_char,
        dataSize: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn UnloadFileData(data: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn SaveFileData(
        fileName: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        dataSize: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ExportDataAsCode(
        data: *const ::std::os::raw::c_uchar,
        dataSize: ::std::os::raw::c_int,
        fileName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn LoadFileText(fileName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn UnloadFileText(text: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn SaveFileText(
        fileName: *const ::std::os::raw::c_char,
        text: *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn FileExists(fileName: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn DirectoryExists(dirPath: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn IsFileExtension(
        fileName: *const ::std::os::raw::c_char,
        ext: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn GetFileLength(fileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetFileExtension(
        fileName: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetFileName(filePath: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetFileNameWithoutExt(
        filePath: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetDirectoryPath(
        filePath: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetPrevDirectoryPath(
        dirPath: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetWorkingDirectory() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetApplicationDirectory() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ChangeDirectory(dir: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn IsPathFile(path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn LoadDirectoryFiles(dirPath: *const ::std::os::raw::c_char) -> FilePathList;
}
extern "C" {
    pub fn LoadDirectoryFilesEx(
        basePath: *const ::std::os::raw::c_char,
        filter: *const ::std::os::raw::c_char,
        scanSubdirs: bool,
    ) -> FilePathList;
}
extern "C" {
    pub fn UnloadDirectoryFiles(files: FilePathList);
}
extern "C" {
    pub fn IsFileDropped() -> bool;
}
extern "C" {
    pub fn LoadDroppedFiles() -> FilePathList;
}
extern "C" {
    pub fn UnloadDroppedFiles(files: FilePathList);
}
extern "C" {
    pub fn GetFileModTime(fileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn CompressData(
        data: *const ::std::os::raw::c_uchar,
        dataSize: ::std::os::raw::c_int,
        compDataSize: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn DecompressData(
        compData: *const ::std::os::raw::c_uchar,
        compDataSize: ::std::os::raw::c_int,
        dataSize: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn EncodeDataBase64(
        data: *const ::std::os::raw::c_uchar,
        dataSize: ::std::os::raw::c_int,
        outputSize: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn DecodeDataBase64(
        data: *const ::std::os::raw::c_uchar,
        outputSize: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn LoadAutomationEventList(fileName: *const ::std::os::raw::c_char) -> AutomationEventList;
}
extern "C" {
    pub fn UnloadAutomationEventList(list: *mut AutomationEventList);
}
extern "C" {
    pub fn ExportAutomationEventList(
        list: AutomationEventList,
        fileName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn SetAutomationEventList(list: *mut AutomationEventList);
}
extern "C" {
    pub fn SetAutomationEventBaseFrame(frame: ::std::os::raw::c_int);
}
extern "C" {
    pub fn StartAutomationEventRecording();
}
extern "C" {
    pub fn StopAutomationEventRecording();
}
extern "C" {
    pub fn PlayAutomationEvent(event: AutomationEvent);
}
extern "C" {
    pub fn IsKeyPressed(key: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn IsKeyPressedRepeat(key: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn IsKeyDown(key: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn IsKeyReleased(key: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn IsKeyUp(key: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn GetKeyPressed() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetCharPressed() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SetExitKey(key: ::std::os::raw::c_int);
}
extern "C" {
    pub fn IsGamepadAvailable(gamepad: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn GetGamepadName(gamepad: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn IsGamepadButtonPressed(
        gamepad: ::std::os::raw::c_int,
        button: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn IsGamepadButtonDown(
        gamepad: ::std::os::raw::c_int,
        button: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn IsGamepadButtonReleased(
        gamepad: ::std::os::raw::c_int,
        button: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn IsGamepadButtonUp(gamepad: ::std::os::raw::c_int, button: ::std::os::raw::c_int)
        -> bool;
}
extern "C" {
    pub fn GetGamepadButtonPressed() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetGamepadAxisCount(gamepad: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetGamepadAxisMovement(
        gamepad: ::std::os::raw::c_int,
        axis: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn SetGamepadMappings(mappings: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IsMouseButtonPressed(button: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn IsMouseButtonDown(button: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn IsMouseButtonReleased(button: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn IsMouseButtonUp(button: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn GetMouseX() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetMouseY() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetMousePosition() -> Vector2;
}
extern "C" {
    pub fn GetMouseDelta() -> Vector2;
}
extern "C" {
    pub fn SetMousePosition(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SetMouseOffset(offsetX: ::std::os::raw::c_int, offsetY: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SetMouseScale(scaleX: f32, scaleY: f32);
}
extern "C" {
    pub fn GetMouseWheelMove() -> f32;
}
extern "C" {
    pub fn GetMouseWheelMoveV() -> Vector2;
}
extern "C" {
    pub fn SetMouseCursor(cursor: ::std::os::raw::c_int);
}
extern "C" {
    pub fn GetTouchX() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetTouchY() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetTouchPosition(index: ::std::os::raw::c_int) -> Vector2;
}
extern "C" {
    pub fn GetTouchPointId(index: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetTouchPointCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SetGesturesEnabled(flags: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn IsGestureDetected(gesture: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn GetGestureDetected() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetGestureHoldDuration() -> f32;
}
extern "C" {
    pub fn GetGestureDragVector() -> Vector2;
}
extern "C" {
    pub fn GetGestureDragAngle() -> f32;
}
extern "C" {
    pub fn GetGesturePinchVector() -> Vector2;
}
extern "C" {
    pub fn GetGesturePinchAngle() -> f32;
}
extern "C" {
    pub fn UpdateCamera(camera: *mut Camera, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn UpdateCameraPro(camera: *mut Camera, movement: Vector3, rotation: Vector3, zoom: f32);
}
extern "C" {
    pub fn SetShapesTexture(texture: Texture2D, source: Rectangle);
}
extern "C" {
    pub fn DrawPixel(posX: ::std::os::raw::c_int, posY: ::std::os::raw::c_int, color: Color);
}
extern "C" {
    pub fn DrawPixelV(position: Vector2, color: Color);
}
extern "C" {
    pub fn DrawLine(
        startPosX: ::std::os::raw::c_int,
        startPosY: ::std::os::raw::c_int,
        endPosX: ::std::os::raw::c_int,
        endPosY: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn DrawLineV(startPos: Vector2, endPos: Vector2, color: Color);
}
extern "C" {
    pub fn DrawLineEx(startPos: Vector2, endPos: Vector2, thick: f32, color: Color);
}
extern "C" {
    pub fn DrawLineStrip(points: *mut Vector2, pointCount: ::std::os::raw::c_int, color: Color);
}
extern "C" {
    pub fn DrawLineBezier(startPos: Vector2, endPos: Vector2, thick: f32, color: Color);
}
extern "C" {
    pub fn DrawCircle(
        centerX: ::std::os::raw::c_int,
        centerY: ::std::os::raw::c_int,
        radius: f32,
        color: Color,
    );
}
extern "C" {
    pub fn DrawCircleSector(
        center: Vector2,
        radius: f32,
        startAngle: f32,
        endAngle: f32,
        segments: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn DrawCircleSectorLines(
        center: Vector2,
        radius: f32,
        startAngle: f32,
        endAngle: f32,
        segments: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn DrawCircleGradient(
        centerX: ::std::os::raw::c_int,
        centerY: ::std::os::raw::c_int,
        radius: f32,
        color1: Color,
        color2: Color,
    );
}
extern "C" {
    pub fn DrawCircleV(center: Vector2, radius: f32, color: Color);
}
extern "C" {
    pub fn DrawCircleLines(
        centerX: ::std::os::raw::c_int,
        centerY: ::std::os::raw::c_int,
        radius: f32,
        color: Color,
    );
}
extern "C" {
    pub fn DrawCircleLinesV(center: Vector2, radius: f32, color: Color);
}
extern "C" {
    pub fn DrawEllipse(
        centerX: ::std::os::raw::c_int,
        centerY: ::std::os::raw::c_int,
        radiusH: f32,
        radiusV: f32,
        color: Color,
    );
}
extern "C" {
    pub fn DrawEllipseLines(
        centerX: ::std::os::raw::c_int,
        centerY: ::std::os::raw::c_int,
        radiusH: f32,
        radiusV: f32,
        color: Color,
    );
}
extern "C" {
    pub fn DrawRing(
        center: Vector2,
        innerRadius: f32,
        outerRadius: f32,
        startAngle: f32,
        endAngle: f32,
        segments: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn DrawRingLines(
        center: Vector2,
        innerRadius: f32,
        outerRadius: f32,
        startAngle: f32,
        endAngle: f32,
        segments: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn DrawRectangle(
        posX: ::std::os::raw::c_int,
        posY: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn DrawRectangleV(position: Vector2, size: Vector2, color: Color);
}
extern "C" {
    pub fn DrawRectangleRec(rec: Rectangle, color: Color);
}
extern "C" {
    pub fn DrawRectanglePro(rec: Rectangle, origin: Vector2, rotation: f32, color: Color);
}
extern "C" {
    pub fn DrawRectangleGradientV(
        posX: ::std::os::raw::c_int,
        posY: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        color1: Color,
        color2: Color,
    );
}
extern "C" {
    pub fn DrawRectangleGradientH(
        posX: ::std::os::raw::c_int,
        posY: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        color1: Color,
        color2: Color,
    );
}
extern "C" {
    pub fn DrawRectangleGradientEx(
        rec: Rectangle,
        col1: Color,
        col2: Color,
        col3: Color,
        col4: Color,
    );
}
extern "C" {
    pub fn DrawRectangleLines(
        posX: ::std::os::raw::c_int,
        posY: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn DrawRectangleLinesEx(rec: Rectangle, lineThick: f32, color: Color);
}
extern "C" {
    pub fn DrawRectangleRounded(
        rec: Rectangle,
        roundness: f32,
        segments: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn DrawRectangleRoundedLines(
        rec: Rectangle,
        roundness: f32,
        segments: ::std::os::raw::c_int,
        lineThick: f32,
        color: Color,
    );
}
extern "C" {
    pub fn DrawTriangle(v1: Vector2, v2: Vector2, v3: Vector2, color: Color);
}
extern "C" {
    pub fn DrawTriangleLines(v1: Vector2, v2: Vector2, v3: Vector2, color: Color);
}
extern "C" {
    pub fn DrawTriangleFan(points: *mut Vector2, pointCount: ::std::os::raw::c_int, color: Color);
}
extern "C" {
    pub fn DrawTriangleStrip(points: *mut Vector2, pointCount: ::std::os::raw::c_int, color: Color);
}
extern "C" {
    pub fn DrawPoly(
        center: Vector2,
        sides: ::std::os::raw::c_int,
        radius: f32,
        rotation: f32,
        color: Color,
    );
}
extern "C" {
    pub fn DrawPolyLines(
        center: Vector2,
        sides: ::std::os::raw::c_int,
        radius: f32,
        rotation: f32,
        color: Color,
    );
}
extern "C" {
    pub fn DrawPolyLinesEx(
        center: Vector2,
        sides: ::std::os::raw::c_int,
        radius: f32,
        rotation: f32,
        lineThick: f32,
        color: Color,
    );
}
extern "C" {
    pub fn DrawSplineLinear(
        points: *mut Vector2,
        pointCount: ::std::os::raw::c_int,
        thick: f32,
        color: Color,
    );
}
extern "C" {
    pub fn DrawSplineBasis(
        points: *mut Vector2,
        pointCount: ::std::os::raw::c_int,
        thick: f32,
        color: Color,
    );
}
extern "C" {
    pub fn DrawSplineCatmullRom(
        points: *mut Vector2,
        pointCount: ::std::os::raw::c_int,
        thick: f32,
        color: Color,
    );
}
extern "C" {
    pub fn DrawSplineBezierQuadratic(
        points: *mut Vector2,
        pointCount: ::std::os::raw::c_int,
        thick: f32,
        color: Color,
    );
}
extern "C" {
    pub fn DrawSplineBezierCubic(
        points: *mut Vector2,
        pointCount: ::std::os::raw::c_int,
        thick: f32,
        color: Color,
    );
}
extern "C" {
    pub fn DrawSplineSegmentLinear(p1: Vector2, p2: Vector2, thick: f32, color: Color);
}
extern "C" {
    pub fn DrawSplineSegmentBasis(
        p1: Vector2,
        p2: Vector2,
        p3: Vector2,
        p4: Vector2,
        thick: f32,
        color: Color,
    );
}
extern "C" {
    pub fn DrawSplineSegmentCatmullRom(
        p1: Vector2,
        p2: Vector2,
        p3: Vector2,
        p4: Vector2,
        thick: f32,
        color: Color,
    );
}
extern "C" {
    pub fn DrawSplineSegmentBezierQuadratic(
        p1: Vector2,
        c2: Vector2,
        p3: Vector2,
        thick: f32,
        color: Color,
    );
}
extern "C" {
    pub fn DrawSplineSegmentBezierCubic(
        p1: Vector2,
        c2: Vector2,
        c3: Vector2,
        p4: Vector2,
        thick: f32,
        color: Color,
    );
}
extern "C" {
    pub fn GetSplinePointLinear(startPos: Vector2, endPos: Vector2, t: f32) -> Vector2;
}
extern "C" {
    pub fn GetSplinePointBasis(
        p1: Vector2,
        p2: Vector2,
        p3: Vector2,
        p4: Vector2,
        t: f32,
    ) -> Vector2;
}
extern "C" {
    pub fn GetSplinePointCatmullRom(
        p1: Vector2,
        p2: Vector2,
        p3: Vector2,
        p4: Vector2,
        t: f32,
    ) -> Vector2;
}
extern "C" {
    pub fn GetSplinePointBezierQuad(p1: Vector2, c2: Vector2, p3: Vector2, t: f32) -> Vector2;
}
extern "C" {
    pub fn GetSplinePointBezierCubic(
        p1: Vector2,
        c2: Vector2,
        c3: Vector2,
        p4: Vector2,
        t: f32,
    ) -> Vector2;
}
extern "C" {
    pub fn CheckCollisionRecs(rec1: Rectangle, rec2: Rectangle) -> bool;
}
extern "C" {
    pub fn CheckCollisionCircles(
        center1: Vector2,
        radius1: f32,
        center2: Vector2,
        radius2: f32,
    ) -> bool;
}
extern "C" {
    pub fn CheckCollisionCircleRec(center: Vector2, radius: f32, rec: Rectangle) -> bool;
}
extern "C" {
    pub fn CheckCollisionPointRec(point: Vector2, rec: Rectangle) -> bool;
}
extern "C" {
    pub fn CheckCollisionPointCircle(point: Vector2, center: Vector2, radius: f32) -> bool;
}
extern "C" {
    pub fn CheckCollisionPointTriangle(
        point: Vector2,
        p1: Vector2,
        p2: Vector2,
        p3: Vector2,
    ) -> bool;
}
extern "C" {
    pub fn CheckCollisionPointPoly(
        point: Vector2,
        points: *mut Vector2,
        pointCount: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn CheckCollisionLines(
        startPos1: Vector2,
        endPos1: Vector2,
        startPos2: Vector2,
        endPos2: Vector2,
        collisionPoint: *mut Vector2,
    ) -> bool;
}
extern "C" {
    pub fn CheckCollisionPointLine(
        point: Vector2,
        p1: Vector2,
        p2: Vector2,
        threshold: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn GetCollisionRec(rec1: Rectangle, rec2: Rectangle) -> Rectangle;
}
extern "C" {
    pub fn LoadImage(fileName: *const ::std::os::raw::c_char) -> Image;
}
extern "C" {
    pub fn LoadImageRaw(
        fileName: *const ::std::os::raw::c_char,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        format: ::std::os::raw::c_int,
        headerSize: ::std::os::raw::c_int,
    ) -> Image;
}
extern "C" {
    pub fn LoadImageSvg(
        fileNameOrString: *const ::std::os::raw::c_char,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> Image;
}
extern "C" {
    pub fn LoadImageAnim(
        fileName: *const ::std::os::raw::c_char,
        frames: *mut ::std::os::raw::c_int,
    ) -> Image;
}
extern "C" {
    pub fn LoadImageFromMemory(
        fileType: *const ::std::os::raw::c_char,
        fileData: *const ::std::os::raw::c_uchar,
        dataSize: ::std::os::raw::c_int,
    ) -> Image;
}
extern "C" {
    pub fn LoadImageFromTexture(texture: Texture2D) -> Image;
}
extern "C" {
    pub fn LoadImageFromScreen() -> Image;
}
extern "C" {
    pub fn IsImageReady(image: Image) -> bool;
}
extern "C" {
    pub fn UnloadImage(image: Image);
}
extern "C" {
    pub fn ExportImage(image: Image, fileName: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ExportImageToMemory(
        image: Image,
        fileType: *const ::std::os::raw::c_char,
        fileSize: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn ExportImageAsCode(image: Image, fileName: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn GenImageColor(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        color: Color,
    ) -> Image;
}
extern "C" {
    pub fn GenImageGradientLinear(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        direction: ::std::os::raw::c_int,
        start: Color,
        end: Color,
    ) -> Image;
}
extern "C" {
    pub fn GenImageGradientRadial(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        density: f32,
        inner: Color,
        outer: Color,
    ) -> Image;
}
extern "C" {
    pub fn GenImageGradientSquare(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        density: f32,
        inner: Color,
        outer: Color,
    ) -> Image;
}
extern "C" {
    pub fn GenImageChecked(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        checksX: ::std::os::raw::c_int,
        checksY: ::std::os::raw::c_int,
        col1: Color,
        col2: Color,
    ) -> Image;
}
extern "C" {
    pub fn GenImageWhiteNoise(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        factor: f32,
    ) -> Image;
}
extern "C" {
    pub fn GenImagePerlinNoise(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        offsetX: ::std::os::raw::c_int,
        offsetY: ::std::os::raw::c_int,
        scale: f32,
    ) -> Image;
}
extern "C" {
    pub fn GenImageCellular(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        tileSize: ::std::os::raw::c_int,
    ) -> Image;
}
extern "C" {
    pub fn GenImageText(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    ) -> Image;
}
extern "C" {
    pub fn ImageCopy(image: Image) -> Image;
}
extern "C" {
    pub fn ImageFromImage(image: Image, rec: Rectangle) -> Image;
}
extern "C" {
    pub fn ImageText(
        text: *const ::std::os::raw::c_char,
        fontSize: ::std::os::raw::c_int,
        color: Color,
    ) -> Image;
}
extern "C" {
    pub fn ImageTextEx(
        font: Font,
        text: *const ::std::os::raw::c_char,
        fontSize: f32,
        spacing: f32,
        tint: Color,
    ) -> Image;
}
extern "C" {
    pub fn ImageFormat(image: *mut Image, newFormat: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImageToPOT(image: *mut Image, fill: Color);
}
extern "C" {
    pub fn ImageCrop(image: *mut Image, crop: Rectangle);
}
extern "C" {
    pub fn ImageAlphaCrop(image: *mut Image, threshold: f32);
}
extern "C" {
    pub fn ImageAlphaClear(image: *mut Image, color: Color, threshold: f32);
}
extern "C" {
    pub fn ImageAlphaMask(image: *mut Image, alphaMask: Image);
}
extern "C" {
    pub fn ImageAlphaPremultiply(image: *mut Image);
}
extern "C" {
    pub fn ImageBlurGaussian(image: *mut Image, blurSize: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImageResize(
        image: *mut Image,
        newWidth: ::std::os::raw::c_int,
        newHeight: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImageResizeNN(
        image: *mut Image,
        newWidth: ::std::os::raw::c_int,
        newHeight: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImageResizeCanvas(
        image: *mut Image,
        newWidth: ::std::os::raw::c_int,
        newHeight: ::std::os::raw::c_int,
        offsetX: ::std::os::raw::c_int,
        offsetY: ::std::os::raw::c_int,
        fill: Color,
    );
}
extern "C" {
    pub fn ImageMipmaps(image: *mut Image);
}
extern "C" {
    pub fn ImageDither(
        image: *mut Image,
        rBpp: ::std::os::raw::c_int,
        gBpp: ::std::os::raw::c_int,
        bBpp: ::std::os::raw::c_int,
        aBpp: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImageFlipVertical(image: *mut Image);
}
extern "C" {
    pub fn ImageFlipHorizontal(image: *mut Image);
}
extern "C" {
    pub fn ImageRotate(image: *mut Image, degrees: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImageRotateCW(image: *mut Image);
}
extern "C" {
    pub fn ImageRotateCCW(image: *mut Image);
}
extern "C" {
    pub fn ImageColorTint(image: *mut Image, color: Color);
}
extern "C" {
    pub fn ImageColorInvert(image: *mut Image);
}
extern "C" {
    pub fn ImageColorGrayscale(image: *mut Image);
}
extern "C" {
    pub fn ImageColorContrast(image: *mut Image, contrast: f32);
}
extern "C" {
    pub fn ImageColorBrightness(image: *mut Image, brightness: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImageColorReplace(image: *mut Image, color: Color, replace: Color);
}
extern "C" {
    pub fn LoadImageColors(image: Image) -> *mut Color;
}
extern "C" {
    pub fn LoadImagePalette(
        image: Image,
        maxPaletteSize: ::std::os::raw::c_int,
        colorCount: *mut ::std::os::raw::c_int,
    ) -> *mut Color;
}
extern "C" {
    pub fn UnloadImageColors(colors: *mut Color);
}
extern "C" {
    pub fn UnloadImagePalette(colors: *mut Color);
}
extern "C" {
    pub fn GetImageAlphaBorder(image: Image, threshold: f32) -> Rectangle;
}
extern "C" {
    pub fn GetImageColor(image: Image, x: ::std::os::raw::c_int, y: ::std::os::raw::c_int)
        -> Color;
}
extern "C" {
    pub fn ImageClearBackground(dst: *mut Image, color: Color);
}
extern "C" {
    pub fn ImageDrawPixel(
        dst: *mut Image,
        posX: ::std::os::raw::c_int,
        posY: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn ImageDrawPixelV(dst: *mut Image, position: Vector2, color: Color);
}
extern "C" {
    pub fn ImageDrawLine(
        dst: *mut Image,
        startPosX: ::std::os::raw::c_int,
        startPosY: ::std::os::raw::c_int,
        endPosX: ::std::os::raw::c_int,
        endPosY: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn ImageDrawLineV(dst: *mut Image, start: Vector2, end: Vector2, color: Color);
}
extern "C" {
    pub fn ImageDrawCircle(
        dst: *mut Image,
        centerX: ::std::os::raw::c_int,
        centerY: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn ImageDrawCircleV(
        dst: *mut Image,
        center: Vector2,
        radius: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn ImageDrawCircleLines(
        dst: *mut Image,
        centerX: ::std::os::raw::c_int,
        centerY: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn ImageDrawCircleLinesV(
        dst: *mut Image,
        center: Vector2,
        radius: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn ImageDrawRectangle(
        dst: *mut Image,
        posX: ::std::os::raw::c_int,
        posY: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn ImageDrawRectangleV(dst: *mut Image, position: Vector2, size: Vector2, color: Color);
}
extern "C" {
    pub fn ImageDrawRectangleRec(dst: *mut Image, rec: Rectangle, color: Color);
}
extern "C" {
    pub fn ImageDrawRectangleLines(
        dst: *mut Image,
        rec: Rectangle,
        thick: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn ImageDraw(
        dst: *mut Image,
        src: Image,
        srcRec: Rectangle,
        dstRec: Rectangle,
        tint: Color,
    );
}
extern "C" {
    pub fn ImageDrawText(
        dst: *mut Image,
        text: *const ::std::os::raw::c_char,
        posX: ::std::os::raw::c_int,
        posY: ::std::os::raw::c_int,
        fontSize: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn ImageDrawTextEx(
        dst: *mut Image,
        font: Font,
        text: *const ::std::os::raw::c_char,
        position: Vector2,
        fontSize: f32,
        spacing: f32,
        tint: Color,
    );
}
extern "C" {
    pub fn LoadTexture(fileName: *const ::std::os::raw::c_char) -> Texture2D;
}
extern "C" {
    pub fn LoadTextureFromImage(image: Image) -> Texture2D;
}
extern "C" {
    pub fn LoadTextureCubemap(image: Image, layout: ::std::os::raw::c_int) -> TextureCubemap;
}
extern "C" {
    pub fn LoadRenderTexture(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> RenderTexture2D;
}
extern "C" {
    pub fn IsTextureReady(texture: Texture2D) -> bool;
}
extern "C" {
    pub fn UnloadTexture(texture: Texture2D);
}
extern "C" {
    pub fn IsRenderTextureReady(target: RenderTexture2D) -> bool;
}
extern "C" {
    pub fn UnloadRenderTexture(target: RenderTexture2D);
}
extern "C" {
    pub fn UpdateTexture(texture: Texture2D, pixels: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn UpdateTextureRec(
        texture: Texture2D,
        rec: Rectangle,
        pixels: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn GenTextureMipmaps(texture: *mut Texture2D);
}
extern "C" {
    pub fn SetTextureFilter(texture: Texture2D, filter: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SetTextureWrap(texture: Texture2D, wrap: ::std::os::raw::c_int);
}
extern "C" {
    pub fn DrawTexture(
        texture: Texture2D,
        posX: ::std::os::raw::c_int,
        posY: ::std::os::raw::c_int,
        tint: Color,
    );
}
extern "C" {
    pub fn DrawTextureV(texture: Texture2D, position: Vector2, tint: Color);
}
extern "C" {
    pub fn DrawTextureEx(
        texture: Texture2D,
        position: Vector2,
        rotation: f32,
        scale: f32,
        tint: Color,
    );
}
extern "C" {
    pub fn DrawTextureRec(texture: Texture2D, source: Rectangle, position: Vector2, tint: Color);
}
extern "C" {
    pub fn DrawTexturePro(
        texture: Texture2D,
        source: Rectangle,
        dest: Rectangle,
        origin: Vector2,
        rotation: f32,
        tint: Color,
    );
}
extern "C" {
    pub fn DrawTextureNPatch(
        texture: Texture2D,
        nPatchInfo: NPatchInfo,
        dest: Rectangle,
        origin: Vector2,
        rotation: f32,
        tint: Color,
    );
}
extern "C" {
    pub fn Fade(color: Color, alpha: f32) -> Color;
}
extern "C" {
    pub fn ColorToInt(color: Color) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ColorNormalize(color: Color) -> Vector4;
}
extern "C" {
    pub fn ColorFromNormalized(normalized: Vector4) -> Color;
}
extern "C" {
    pub fn ColorToHSV(color: Color) -> Vector3;
}
extern "C" {
    pub fn ColorFromHSV(hue: f32, saturation: f32, value: f32) -> Color;
}
extern "C" {
    pub fn ColorTint(color: Color, tint: Color) -> Color;
}
extern "C" {
    pub fn ColorBrightness(color: Color, factor: f32) -> Color;
}
extern "C" {
    pub fn ColorContrast(color: Color, contrast: f32) -> Color;
}
extern "C" {
    pub fn ColorAlpha(color: Color, alpha: f32) -> Color;
}
extern "C" {
    pub fn ColorAlphaBlend(dst: Color, src: Color, tint: Color) -> Color;
}
extern "C" {
    pub fn GetColor(hexValue: ::std::os::raw::c_uint) -> Color;
}
extern "C" {
    pub fn GetPixelColor(
        srcPtr: *mut ::std::os::raw::c_void,
        format: ::std::os::raw::c_int,
    ) -> Color;
}
extern "C" {
    pub fn SetPixelColor(
        dstPtr: *mut ::std::os::raw::c_void,
        color: Color,
        format: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn GetPixelDataSize(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        format: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetFontDefault() -> Font;
}
extern "C" {
    pub fn LoadFont(fileName: *const ::std::os::raw::c_char) -> Font;
}
extern "C" {
    pub fn LoadFontEx(
        fileName: *const ::std::os::raw::c_char,
        fontSize: ::std::os::raw::c_int,
        codepoints: *mut ::std::os::raw::c_int,
        codepointCount: ::std::os::raw::c_int,
    ) -> Font;
}
extern "C" {
    pub fn LoadFontFromImage(image: Image, key: Color, firstChar: ::std::os::raw::c_int) -> Font;
}
extern "C" {
    pub fn LoadFontFromMemory(
        fileType: *const ::std::os::raw::c_char,
        fileData: *const ::std::os::raw::c_uchar,
        dataSize: ::std::os::raw::c_int,
        fontSize: ::std::os::raw::c_int,
        codepoints: *mut ::std::os::raw::c_int,
        codepointCount: ::std::os::raw::c_int,
    ) -> Font;
}
extern "C" {
    pub fn IsFontReady(font: Font) -> bool;
}
extern "C" {
    pub fn LoadFontData(
        fileData: *const ::std::os::raw::c_uchar,
        dataSize: ::std::os::raw::c_int,
        fontSize: ::std::os::raw::c_int,
        codepoints: *mut ::std::os::raw::c_int,
        codepointCount: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
    ) -> *mut GlyphInfo;
}
extern "C" {
    pub fn GenImageFontAtlas(
        glyphs: *const GlyphInfo,
        glyphRecs: *mut *mut Rectangle,
        glyphCount: ::std::os::raw::c_int,
        fontSize: ::std::os::raw::c_int,
        padding: ::std::os::raw::c_int,
        packMethod: ::std::os::raw::c_int,
    ) -> Image;
}
extern "C" {
    pub fn UnloadFontData(glyphs: *mut GlyphInfo, glyphCount: ::std::os::raw::c_int);
}
extern "C" {
    pub fn UnloadFont(font: Font);
}
extern "C" {
    pub fn ExportFontAsCode(font: Font, fileName: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn DrawFPS(posX: ::std::os::raw::c_int, posY: ::std::os::raw::c_int);
}
extern "C" {
    pub fn DrawText(
        text: *const ::std::os::raw::c_char,
        posX: ::std::os::raw::c_int,
        posY: ::std::os::raw::c_int,
        fontSize: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn DrawTextEx(
        font: Font,
        text: *const ::std::os::raw::c_char,
        position: Vector2,
        fontSize: f32,
        spacing: f32,
        tint: Color,
    );
}
extern "C" {
    pub fn DrawTextPro(
        font: Font,
        text: *const ::std::os::raw::c_char,
        position: Vector2,
        origin: Vector2,
        rotation: f32,
        fontSize: f32,
        spacing: f32,
        tint: Color,
    );
}
extern "C" {
    pub fn DrawTextCodepoint(
        font: Font,
        codepoint: ::std::os::raw::c_int,
        position: Vector2,
        fontSize: f32,
        tint: Color,
    );
}
extern "C" {
    pub fn DrawTextCodepoints(
        font: Font,
        codepoints: *const ::std::os::raw::c_int,
        codepointCount: ::std::os::raw::c_int,
        position: Vector2,
        fontSize: f32,
        spacing: f32,
        tint: Color,
    );
}
extern "C" {
    pub fn SetTextLineSpacing(spacing: ::std::os::raw::c_int);
}
extern "C" {
    pub fn MeasureText(
        text: *const ::std::os::raw::c_char,
        fontSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MeasureTextEx(
        font: Font,
        text: *const ::std::os::raw::c_char,
        fontSize: f32,
        spacing: f32,
    ) -> Vector2;
}
extern "C" {
    pub fn GetGlyphIndex(font: Font, codepoint: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetGlyphInfo(font: Font, codepoint: ::std::os::raw::c_int) -> GlyphInfo;
}
extern "C" {
    pub fn GetGlyphAtlasRec(font: Font, codepoint: ::std::os::raw::c_int) -> Rectangle;
}
extern "C" {
    pub fn LoadUTF8(
        codepoints: *const ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn UnloadUTF8(text: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn LoadCodepoints(
        text: *const ::std::os::raw::c_char,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn UnloadCodepoints(codepoints: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn GetCodepointCount(text: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetCodepoint(
        text: *const ::std::os::raw::c_char,
        codepointSize: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetCodepointNext(
        text: *const ::std::os::raw::c_char,
        codepointSize: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetCodepointPrevious(
        text: *const ::std::os::raw::c_char,
        codepointSize: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CodepointToUTF8(
        codepoint: ::std::os::raw::c_int,
        utf8Size: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TextCopy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TextIsEqual(
        text1: *const ::std::os::raw::c_char,
        text2: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TextLength(text: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn TextFormat(text: *const ::std::os::raw::c_char, ...) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TextSubtext(
        text: *const ::std::os::raw::c_char,
        position: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TextReplace(
        text: *mut ::std::os::raw::c_char,
        replace: *const ::std::os::raw::c_char,
        by: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TextInsert(
        text: *const ::std::os::raw::c_char,
        insert: *const ::std::os::raw::c_char,
        position: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TextJoin(
        textList: *mut *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        delimiter: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TextSplit(
        text: *const ::std::os::raw::c_char,
        delimiter: ::std::os::raw::c_char,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TextAppend(
        text: *mut ::std::os::raw::c_char,
        append: *const ::std::os::raw::c_char,
        position: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TextFindIndex(
        text: *const ::std::os::raw::c_char,
        find: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TextToUpper(text: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TextToLower(text: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TextToPascal(text: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TextToInteger(text: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DrawLine3D(startPos: Vector3, endPos: Vector3, color: Color);
}
extern "C" {
    pub fn DrawPoint3D(position: Vector3, color: Color);
}
extern "C" {
    pub fn DrawCircle3D(
        center: Vector3,
        radius: f32,
        rotationAxis: Vector3,
        rotationAngle: f32,
        color: Color,
    );
}
extern "C" {
    pub fn DrawTriangle3D(v1: Vector3, v2: Vector3, v3: Vector3, color: Color);
}
extern "C" {
    pub fn DrawTriangleStrip3D(
        points: *mut Vector3,
        pointCount: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn DrawCube(position: Vector3, width: f32, height: f32, length: f32, color: Color);
}
extern "C" {
    pub fn DrawCubeV(position: Vector3, size: Vector3, color: Color);
}
extern "C" {
    pub fn DrawCubeWires(position: Vector3, width: f32, height: f32, length: f32, color: Color);
}
extern "C" {
    pub fn DrawCubeWiresV(position: Vector3, size: Vector3, color: Color);
}
extern "C" {
    pub fn DrawSphere(centerPos: Vector3, radius: f32, color: Color);
}
extern "C" {
    pub fn DrawSphereEx(
        centerPos: Vector3,
        radius: f32,
        rings: ::std::os::raw::c_int,
        slices: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn DrawSphereWires(
        centerPos: Vector3,
        radius: f32,
        rings: ::std::os::raw::c_int,
        slices: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn DrawCylinder(
        position: Vector3,
        radiusTop: f32,
        radiusBottom: f32,
        height: f32,
        slices: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn DrawCylinderEx(
        startPos: Vector3,
        endPos: Vector3,
        startRadius: f32,
        endRadius: f32,
        sides: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn DrawCylinderWires(
        position: Vector3,
        radiusTop: f32,
        radiusBottom: f32,
        height: f32,
        slices: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn DrawCylinderWiresEx(
        startPos: Vector3,
        endPos: Vector3,
        startRadius: f32,
        endRadius: f32,
        sides: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn DrawCapsule(
        startPos: Vector3,
        endPos: Vector3,
        radius: f32,
        slices: ::std::os::raw::c_int,
        rings: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn DrawCapsuleWires(
        startPos: Vector3,
        endPos: Vector3,
        radius: f32,
        slices: ::std::os::raw::c_int,
        rings: ::std::os::raw::c_int,
        color: Color,
    );
}
extern "C" {
    pub fn DrawPlane(centerPos: Vector3, size: Vector2, color: Color);
}
extern "C" {
    pub fn DrawRay(ray: Ray, color: Color);
}
extern "C" {
    pub fn DrawGrid(slices: ::std::os::raw::c_int, spacing: f32);
}
extern "C" {
    pub fn LoadModel(fileName: *const ::std::os::raw::c_char) -> Model;
}
extern "C" {
    pub fn LoadModelFromMesh(mesh: Mesh) -> Model;
}
extern "C" {
    pub fn IsModelReady(model: Model) -> bool;
}
extern "C" {
    pub fn UnloadModel(model: Model);
}
extern "C" {
    pub fn GetModelBoundingBox(model: Model) -> BoundingBox;
}
extern "C" {
    pub fn DrawModel(model: Model, position: Vector3, scale: f32, tint: Color);
}
extern "C" {
    pub fn DrawModelEx(
        model: Model,
        position: Vector3,
        rotationAxis: Vector3,
        rotationAngle: f32,
        scale: Vector3,
        tint: Color,
    );
}
extern "C" {
    pub fn DrawModelWires(model: Model, position: Vector3, scale: f32, tint: Color);
}
extern "C" {
    pub fn DrawModelWiresEx(
        model: Model,
        position: Vector3,
        rotationAxis: Vector3,
        rotationAngle: f32,
        scale: Vector3,
        tint: Color,
    );
}
extern "C" {
    pub fn DrawBoundingBox(box_: BoundingBox, color: Color);
}
extern "C" {
    pub fn DrawBillboard(
        camera: Camera,
        texture: Texture2D,
        position: Vector3,
        size: f32,
        tint: Color,
    );
}
extern "C" {
    pub fn DrawBillboardRec(
        camera: Camera,
        texture: Texture2D,
        source: Rectangle,
        position: Vector3,
        size: Vector2,
        tint: Color,
    );
}
extern "C" {
    pub fn DrawBillboardPro(
        camera: Camera,
        texture: Texture2D,
        source: Rectangle,
        position: Vector3,
        up: Vector3,
        size: Vector2,
        origin: Vector2,
        rotation: f32,
        tint: Color,
    );
}
extern "C" {
    pub fn UploadMesh(mesh: *mut Mesh, dynamic: bool);
}
extern "C" {
    pub fn UpdateMeshBuffer(
        mesh: Mesh,
        index: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_void,
        dataSize: ::std::os::raw::c_int,
        offset: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn UnloadMesh(mesh: Mesh);
}
extern "C" {
    pub fn DrawMesh(mesh: Mesh, material: Material, transform: Matrix);
}
extern "C" {
    pub fn DrawMeshInstanced(
        mesh: Mesh,
        material: Material,
        transforms: *const Matrix,
        instances: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ExportMesh(mesh: Mesh, fileName: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn GetMeshBoundingBox(mesh: Mesh) -> BoundingBox;
}
extern "C" {
    pub fn GenMeshTangents(mesh: *mut Mesh);
}
extern "C" {
    pub fn GenMeshPoly(sides: ::std::os::raw::c_int, radius: f32) -> Mesh;
}
extern "C" {
    pub fn GenMeshPlane(
        width: f32,
        length: f32,
        resX: ::std::os::raw::c_int,
        resZ: ::std::os::raw::c_int,
    ) -> Mesh;
}
extern "C" {
    pub fn GenMeshCube(width: f32, height: f32, length: f32) -> Mesh;
}
extern "C" {
    pub fn GenMeshSphere(
        radius: f32,
        rings: ::std::os::raw::c_int,
        slices: ::std::os::raw::c_int,
    ) -> Mesh;
}
extern "C" {
    pub fn GenMeshHemiSphere(
        radius: f32,
        rings: ::std::os::raw::c_int,
        slices: ::std::os::raw::c_int,
    ) -> Mesh;
}
extern "C" {
    pub fn GenMeshCylinder(radius: f32, height: f32, slices: ::std::os::raw::c_int) -> Mesh;
}
extern "C" {
    pub fn GenMeshCone(radius: f32, height: f32, slices: ::std::os::raw::c_int) -> Mesh;
}
extern "C" {
    pub fn GenMeshTorus(
        radius: f32,
        size: f32,
        radSeg: ::std::os::raw::c_int,
        sides: ::std::os::raw::c_int,
    ) -> Mesh;
}
extern "C" {
    pub fn GenMeshKnot(
        radius: f32,
        size: f32,
        radSeg: ::std::os::raw::c_int,
        sides: ::std::os::raw::c_int,
    ) -> Mesh;
}
extern "C" {
    pub fn GenMeshHeightmap(heightmap: Image, size: Vector3) -> Mesh;
}
extern "C" {
    pub fn GenMeshCubicmap(cubicmap: Image, cubeSize: Vector3) -> Mesh;
}
extern "C" {
    pub fn LoadMaterials(
        fileName: *const ::std::os::raw::c_char,
        materialCount: *mut ::std::os::raw::c_int,
    ) -> *mut Material;
}
extern "C" {
    pub fn LoadMaterialDefault() -> Material;
}
extern "C" {
    pub fn IsMaterialReady(material: Material) -> bool;
}
extern "C" {
    pub fn UnloadMaterial(material: Material);
}
extern "C" {
    pub fn SetMaterialTexture(
        material: *mut Material,
        mapType: ::std::os::raw::c_int,
        texture: Texture2D,
    );
}
extern "C" {
    pub fn SetModelMeshMaterial(
        model: *mut Model,
        meshId: ::std::os::raw::c_int,
        materialId: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn LoadModelAnimations(
        fileName: *const ::std::os::raw::c_char,
        animCount: *mut ::std::os::raw::c_int,
    ) -> *mut ModelAnimation;
}
extern "C" {
    pub fn UpdateModelAnimation(model: Model, anim: ModelAnimation, frame: ::std::os::raw::c_int);
}
extern "C" {
    pub fn UnloadModelAnimation(anim: ModelAnimation);
}
extern "C" {
    pub fn UnloadModelAnimations(animations: *mut ModelAnimation, animCount: ::std::os::raw::c_int);
}
extern "C" {
    pub fn IsModelAnimationValid(model: Model, anim: ModelAnimation) -> bool;
}
extern "C" {
    pub fn CheckCollisionSpheres(
        center1: Vector3,
        radius1: f32,
        center2: Vector3,
        radius2: f32,
    ) -> bool;
}
extern "C" {
    pub fn CheckCollisionBoxes(box1: BoundingBox, box2: BoundingBox) -> bool;
}
extern "C" {
    pub fn CheckCollisionBoxSphere(box_: BoundingBox, center: Vector3, radius: f32) -> bool;
}
extern "C" {
    pub fn GetRayCollisionSphere(ray: Ray, center: Vector3, radius: f32) -> RayCollision;
}
extern "C" {
    pub fn GetRayCollisionBox(ray: Ray, box_: BoundingBox) -> RayCollision;
}
extern "C" {
    pub fn GetRayCollisionMesh(ray: Ray, mesh: Mesh, transform: Matrix) -> RayCollision;
}
extern "C" {
    pub fn GetRayCollisionTriangle(ray: Ray, p1: Vector3, p2: Vector3, p3: Vector3)
        -> RayCollision;
}
extern "C" {
    pub fn GetRayCollisionQuad(
        ray: Ray,
        p1: Vector3,
        p2: Vector3,
        p3: Vector3,
        p4: Vector3,
    ) -> RayCollision;
}
pub type AudioCallback = ::std::option::Option<
    unsafe extern "C" fn(bufferData: *mut ::std::os::raw::c_void, frames: ::std::os::raw::c_uint),
>;
extern "C" {
    pub fn InitAudioDevice();
}
extern "C" {
    pub fn CloseAudioDevice();
}
extern "C" {
    pub fn IsAudioDeviceReady() -> bool;
}
extern "C" {
    pub fn SetMasterVolume(volume: f32);
}
extern "C" {
    pub fn GetMasterVolume() -> f32;
}
extern "C" {
    pub fn LoadWave(fileName: *const ::std::os::raw::c_char) -> Wave;
}
extern "C" {
    pub fn LoadWaveFromMemory(
        fileType: *const ::std::os::raw::c_char,
        fileData: *const ::std::os::raw::c_uchar,
        dataSize: ::std::os::raw::c_int,
    ) -> Wave;
}
extern "C" {
    pub fn IsWaveReady(wave: Wave) -> bool;
}
extern "C" {
    pub fn LoadSound(fileName: *const ::std::os::raw::c_char) -> Sound;
}
extern "C" {
    pub fn LoadSoundFromWave(wave: Wave) -> Sound;
}
extern "C" {
    pub fn LoadSoundAlias(source: Sound) -> Sound;
}
extern "C" {
    pub fn IsSoundReady(sound: Sound) -> bool;
}
extern "C" {
    pub fn UpdateSound(
        sound: Sound,
        data: *const ::std::os::raw::c_void,
        sampleCount: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn UnloadWave(wave: Wave);
}
extern "C" {
    pub fn UnloadSound(sound: Sound);
}
extern "C" {
    pub fn UnloadSoundAlias(alias: Sound);
}
extern "C" {
    pub fn ExportWave(wave: Wave, fileName: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ExportWaveAsCode(wave: Wave, fileName: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn PlaySound(sound: Sound);
}
extern "C" {
    pub fn StopSound(sound: Sound);
}
extern "C" {
    pub fn PauseSound(sound: Sound);
}
extern "C" {
    pub fn ResumeSound(sound: Sound);
}
extern "C" {
    pub fn IsSoundPlaying(sound: Sound) -> bool;
}
extern "C" {
    pub fn SetSoundVolume(sound: Sound, volume: f32);
}
extern "C" {
    pub fn SetSoundPitch(sound: Sound, pitch: f32);
}
extern "C" {
    pub fn SetSoundPan(sound: Sound, pan: f32);
}
extern "C" {
    pub fn WaveCopy(wave: Wave) -> Wave;
}
extern "C" {
    pub fn WaveCrop(
        wave: *mut Wave,
        initSample: ::std::os::raw::c_int,
        finalSample: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WaveFormat(
        wave: *mut Wave,
        sampleRate: ::std::os::raw::c_int,
        sampleSize: ::std::os::raw::c_int,
        channels: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn LoadWaveSamples(wave: Wave) -> *mut f32;
}
extern "C" {
    pub fn UnloadWaveSamples(samples: *mut f32);
}
extern "C" {
    pub fn LoadMusicStream(fileName: *const ::std::os::raw::c_char) -> Music;
}
extern "C" {
    pub fn LoadMusicStreamFromMemory(
        fileType: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_uchar,
        dataSize: ::std::os::raw::c_int,
    ) -> Music;
}
extern "C" {
    pub fn IsMusicReady(music: Music) -> bool;
}
extern "C" {
    pub fn UnloadMusicStream(music: Music);
}
extern "C" {
    pub fn PlayMusicStream(music: Music);
}
extern "C" {
    pub fn IsMusicStreamPlaying(music: Music) -> bool;
}
extern "C" {
    pub fn UpdateMusicStream(music: Music);
}
extern "C" {
    pub fn StopMusicStream(music: Music);
}
extern "C" {
    pub fn PauseMusicStream(music: Music);
}
extern "C" {
    pub fn ResumeMusicStream(music: Music);
}
extern "C" {
    pub fn SeekMusicStream(music: Music, position: f32);
}
extern "C" {
    pub fn SetMusicVolume(music: Music, volume: f32);
}
extern "C" {
    pub fn SetMusicPitch(music: Music, pitch: f32);
}
extern "C" {
    pub fn SetMusicPan(music: Music, pan: f32);
}
extern "C" {
    pub fn GetMusicTimeLength(music: Music) -> f32;
}
extern "C" {
    pub fn GetMusicTimePlayed(music: Music) -> f32;
}
extern "C" {
    pub fn LoadAudioStream(
        sampleRate: ::std::os::raw::c_uint,
        sampleSize: ::std::os::raw::c_uint,
        channels: ::std::os::raw::c_uint,
    ) -> AudioStream;
}
extern "C" {
    pub fn IsAudioStreamReady(stream: AudioStream) -> bool;
}
extern "C" {
    pub fn UnloadAudioStream(stream: AudioStream);
}
extern "C" {
    pub fn UpdateAudioStream(
        stream: AudioStream,
        data: *const ::std::os::raw::c_void,
        frameCount: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn IsAudioStreamProcessed(stream: AudioStream) -> bool;
}
extern "C" {
    pub fn PlayAudioStream(stream: AudioStream);
}
extern "C" {
    pub fn PauseAudioStream(stream: AudioStream);
}
extern "C" {
    pub fn ResumeAudioStream(stream: AudioStream);
}
extern "C" {
    pub fn IsAudioStreamPlaying(stream: AudioStream) -> bool;
}
extern "C" {
    pub fn StopAudioStream(stream: AudioStream);
}
extern "C" {
    pub fn SetAudioStreamVolume(stream: AudioStream, volume: f32);
}
extern "C" {
    pub fn SetAudioStreamPitch(stream: AudioStream, pitch: f32);
}
extern "C" {
    pub fn SetAudioStreamPan(stream: AudioStream, pan: f32);
}
extern "C" {
    pub fn SetAudioStreamBufferSizeDefault(size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SetAudioStreamCallback(stream: AudioStream, callback: AudioCallback);
}
extern "C" {
    pub fn AttachAudioStreamProcessor(stream: AudioStream, processor: AudioCallback);
}
extern "C" {
    pub fn DetachAudioStreamProcessor(stream: AudioStream, processor: AudioCallback);
}
extern "C" {
    pub fn AttachAudioMixedProcessor(processor: AudioCallback);
}
extern "C" {
    pub fn DetachAudioMixedProcessor(processor: AudioCallback);
}
